# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `visualization.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'Time' not in _M_jderobot.__dict__:
    _M_jderobot.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, seconds=0, useconds=0):
            self.seconds = seconds
            self.useconds = useconds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.seconds)
            _h = 5 * _h + Ice.getHash(self.useconds)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_jderobot.Time):
                return NotImplemented
            else:
                if self.seconds is None or other.seconds is None:
                    if self.seconds != other.seconds:
                        return (-1 if self.seconds is None else 1)
                else:
                    if self.seconds < other.seconds:
                        return -1
                    elif self.seconds > other.seconds:
                        return 1
                if self.useconds is None or other.useconds is None:
                    if self.useconds != other.useconds:
                        return (-1 if self.useconds is None else 1)
                else:
                    if self.useconds < other.useconds:
                        return -1
                    elif self.useconds > other.useconds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Time)

        __repr__ = __str__

    _M_jderobot._t_Time = IcePy.defineStruct('::jderobot::Time', Time, (), (
        ('seconds', (), IcePy._t_long),
        ('useconds', (), IcePy._t_long)
    ))

    _M_jderobot.Time = Time
    del Time

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'JderobotException' not in _M_jderobot.__dict__:
    _M_jderobot.JderobotException = Ice.createTempClass()
    class JderobotException(Ice.UserException):
        def __init__(self, what=''):
            self.what = what

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::jderobot::JderobotException'

    _M_jderobot._t_JderobotException = IcePy.defineException('::jderobot::JderobotException', JderobotException, (), False, None, (('what', (), IcePy._t_string, False, 0),))
    JderobotException._ice_type = _M_jderobot._t_JderobotException

    _M_jderobot.JderobotException = JderobotException
    del JderobotException

if 'ConfigurationNotExistException' not in _M_jderobot.__dict__:
    _M_jderobot.ConfigurationNotExistException = Ice.createTempClass()
    class ConfigurationNotExistException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::jderobot::ConfigurationNotExistException'

    _M_jderobot._t_ConfigurationNotExistException = IcePy.defineException('::jderobot::ConfigurationNotExistException', ConfigurationNotExistException, (), False, _M_jderobot._t_JderobotException, ())
    ConfigurationNotExistException._ice_type = _M_jderobot._t_ConfigurationNotExistException

    _M_jderobot.ConfigurationNotExistException = ConfigurationNotExistException
    del ConfigurationNotExistException

if 'DataNotExistException' not in _M_jderobot.__dict__:
    _M_jderobot.DataNotExistException = Ice.createTempClass()
    class DataNotExistException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::jderobot::DataNotExistException'

    _M_jderobot._t_DataNotExistException = IcePy.defineException('::jderobot::DataNotExistException', DataNotExistException, (), False, _M_jderobot._t_JderobotException, ())
    DataNotExistException._ice_type = _M_jderobot._t_DataNotExistException

    _M_jderobot.DataNotExistException = DataNotExistException
    del DataNotExistException

if 'HardwareFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.HardwareFailedException = Ice.createTempClass()
    class HardwareFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::jderobot::HardwareFailedException'

    _M_jderobot._t_HardwareFailedException = IcePy.defineException('::jderobot::HardwareFailedException', HardwareFailedException, (), False, _M_jderobot._t_JderobotException, ())
    HardwareFailedException._ice_type = _M_jderobot._t_HardwareFailedException

    _M_jderobot.HardwareFailedException = HardwareFailedException
    del HardwareFailedException

if 'NoTopicException' not in _M_jderobot.__dict__:
    _M_jderobot.NoTopicException = Ice.createTempClass()
    class NoTopicException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::jderobot::NoTopicException'

    _M_jderobot._t_NoTopicException = IcePy.defineException('::jderobot::NoTopicException', NoTopicException, (), False, _M_jderobot._t_JderobotException, ())
    NoTopicException._ice_type = _M_jderobot._t_NoTopicException

    _M_jderobot.NoTopicException = NoTopicException
    del NoTopicException

if 'SubscriptionFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.SubscriptionFailedException = Ice.createTempClass()
    class SubscriptionFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::jderobot::SubscriptionFailedException'

    _M_jderobot._t_SubscriptionFailedException = IcePy.defineException('::jderobot::SubscriptionFailedException', SubscriptionFailedException, (), False, _M_jderobot._t_JderobotException, ())
    SubscriptionFailedException._ice_type = _M_jderobot._t_SubscriptionFailedException

    _M_jderobot.SubscriptionFailedException = SubscriptionFailedException
    del SubscriptionFailedException

if 'SubscriptionPushFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.SubscriptionPushFailedException = Ice.createTempClass()
    class SubscriptionPushFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::jderobot::SubscriptionPushFailedException'

    _M_jderobot._t_SubscriptionPushFailedException = IcePy.defineException('::jderobot::SubscriptionPushFailedException', SubscriptionPushFailedException, (), False, _M_jderobot._t_JderobotException, ())
    SubscriptionPushFailedException._ice_type = _M_jderobot._t_SubscriptionPushFailedException

    _M_jderobot.SubscriptionPushFailedException = SubscriptionPushFailedException
    del SubscriptionPushFailedException

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if '_t_ByteSeq' not in _M_jderobot.__dict__:
    _M_jderobot._t_ByteSeq = IcePy.defineSequence('::jderobot::ByteSeq', (), IcePy._t_byte)

if '_t_IntSeq' not in _M_jderobot.__dict__:
    _M_jderobot._t_IntSeq = IcePy.defineSequence('::jderobot::IntSeq', (), IcePy._t_int)

if '_t_seqFloat' not in _M_jderobot.__dict__:
    _M_jderobot._t_seqFloat = IcePy.defineSequence('::jderobot::seqFloat', (), IcePy._t_float)

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'RGBPoint' not in _M_jderobot.__dict__:
    _M_jderobot.RGBPoint = Ice.createTempClass()
    class RGBPoint(object):
        """
        PCL
        """
        def __init__(self, x=0.0, y=0.0, z=0.0, r=0.0, g=0.0, b=0.0, id=0):
            self.x = x
            self.y = y
            self.z = z
            self.r = r
            self.g = g
            self.b = b
            self.id = id

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.RGBPoint):
                return NotImplemented
            else:
                if self.x != other.x:
                    return False
                if self.y != other.y:
                    return False
                if self.z != other.z:
                    return False
                if self.r != other.r:
                    return False
                if self.g != other.g:
                    return False
                if self.b != other.b:
                    return False
                if self.id != other.id:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_RGBPoint)

        __repr__ = __str__

    _M_jderobot._t_RGBPoint = IcePy.defineStruct('::jderobot::RGBPoint', RGBPoint, (), (
        ('x', (), IcePy._t_float),
        ('y', (), IcePy._t_float),
        ('z', (), IcePy._t_float),
        ('r', (), IcePy._t_float),
        ('g', (), IcePy._t_float),
        ('b', (), IcePy._t_float),
        ('id', (), IcePy._t_int)
    ))

    _M_jderobot.RGBPoint = RGBPoint
    del RGBPoint

if 'Point' not in _M_jderobot.__dict__:
    _M_jderobot.Point = Ice.createTempClass()
    class Point(object):
        def __init__(self, x=0.0, y=0.0, z=0.0):
            self.x = x
            self.y = y
            self.z = z

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.Point):
                return NotImplemented
            else:
                if self.x != other.x:
                    return False
                if self.y != other.y:
                    return False
                if self.z != other.z:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Point)

        __repr__ = __str__

    _M_jderobot._t_Point = IcePy.defineStruct('::jderobot::Point', Point, (), (
        ('x', (), IcePy._t_float),
        ('y', (), IcePy._t_float),
        ('z', (), IcePy._t_float)
    ))

    _M_jderobot.Point = Point
    del Point

if 'Segment' not in _M_jderobot.__dict__:
    _M_jderobot.Segment = Ice.createTempClass()
    class Segment(object):
        def __init__(self, fromPoint=Ice._struct_marker, toPoint=Ice._struct_marker):
            if fromPoint is Ice._struct_marker:
                self.fromPoint = _M_jderobot.Point()
            else:
                self.fromPoint = fromPoint
            if toPoint is Ice._struct_marker:
                self.toPoint = _M_jderobot.Point()
            else:
                self.toPoint = toPoint

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.Segment):
                return NotImplemented
            else:
                if self.fromPoint != other.fromPoint:
                    return False
                if self.toPoint != other.toPoint:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Segment)

        __repr__ = __str__

    _M_jderobot._t_Segment = IcePy.defineStruct('::jderobot::Segment', Segment, (), (
        ('fromPoint', (), _M_jderobot._t_Point),
        ('toPoint', (), _M_jderobot._t_Point)
    ))

    _M_jderobot.Segment = Segment
    del Segment

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'Pose3DData' not in _M_jderobot.__dict__:
    _M_jderobot.Pose3DData = Ice.createTempClass()
    class Pose3DData(Ice.Value):
        """
        Pose3D data information
        """
        def __init__(self, x=0.0, y=0.0, z=0.0, h=0.0, q0=0.0, q1=0.0, q2=0.0, q3=0.0):
            self.x = x
            self.y = y
            self.z = z
            self.h = h
            self.q0 = q0
            self.q1 = q1
            self.q2 = q2
            self.q3 = q3

        def ice_id(self):
            return '::jderobot::Pose3DData'

        @staticmethod
        def ice_staticId():
            return '::jderobot::Pose3DData'

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Pose3DData)

        __repr__ = __str__

    _M_jderobot._t_Pose3DData = IcePy.defineValue('::jderobot::Pose3DData', Pose3DData, -1, (), False, False, None, (
        ('x', (), IcePy._t_float, False, 0),
        ('y', (), IcePy._t_float, False, 0),
        ('z', (), IcePy._t_float, False, 0),
        ('h', (), IcePy._t_float, False, 0),
        ('q0', (), IcePy._t_float, False, 0),
        ('q1', (), IcePy._t_float, False, 0),
        ('q2', (), IcePy._t_float, False, 0),
        ('q3', (), IcePy._t_float, False, 0)
    ))
    Pose3DData._ice_type = _M_jderobot._t_Pose3DData

    _M_jderobot.Pose3DData = Pose3DData
    del Pose3DData

_M_jderobot._t_Pose3D = IcePy.defineValue('::jderobot::Pose3D', Ice.Value, -1, (), False, True, None, ())

if 'Pose3DPrx' not in _M_jderobot.__dict__:
    _M_jderobot.Pose3DPrx = Ice.createTempClass()
    class Pose3DPrx(Ice.ObjectPrx):

        def getPose3DData(self, context=None):
            return _M_jderobot.Pose3D._op_getPose3DData.invoke(self, ((), context))

        def getPose3DDataAsync(self, context=None):
            return _M_jderobot.Pose3D._op_getPose3DData.invokeAsync(self, ((), context))

        def begin_getPose3DData(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Pose3D._op_getPose3DData.begin(self, ((), _response, _ex, _sent, context))

        def end_getPose3DData(self, _r):
            return _M_jderobot.Pose3D._op_getPose3DData.end(self, _r)

        def setPose3DData(self, data, context=None):
            return _M_jderobot.Pose3D._op_setPose3DData.invoke(self, ((data, ), context))

        def setPose3DDataAsync(self, data, context=None):
            return _M_jderobot.Pose3D._op_setPose3DData.invokeAsync(self, ((data, ), context))

        def begin_setPose3DData(self, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Pose3D._op_setPose3DData.begin(self, ((data, ), _response, _ex, _sent, context))

        def end_setPose3DData(self, _r):
            return _M_jderobot.Pose3D._op_setPose3DData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_jderobot.Pose3DPrx.ice_checkedCast(proxy, '::jderobot::Pose3D', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.Pose3DPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::jderobot::Pose3D'
    _M_jderobot._t_Pose3DPrx = IcePy.defineProxy('::jderobot::Pose3D', Pose3DPrx)

    _M_jderobot.Pose3DPrx = Pose3DPrx
    del Pose3DPrx

    _M_jderobot.Pose3D = Ice.createTempClass()
    class Pose3D(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::Pose3D')

        def ice_id(self, current=None):
            return '::jderobot::Pose3D'

        @staticmethod
        def ice_staticId():
            return '::jderobot::Pose3D'

        def getPose3DData(self, current=None):
            raise NotImplementedError("servant method 'getPose3DData' not implemented")

        def setPose3DData(self, data, current=None):
            raise NotImplementedError("servant method 'setPose3DData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Pose3DDisp)

        __repr__ = __str__

    _M_jderobot._t_Pose3DDisp = IcePy.defineClass('::jderobot::Pose3D', Pose3D, (), None, ())
    Pose3D._ice_type = _M_jderobot._t_Pose3DDisp

    Pose3D._op_getPose3DData = IcePy.Operation('getPose3DData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_jderobot._t_Pose3DData, False, 0), ())
    Pose3D._op_setPose3DData = IcePy.Operation('setPose3DData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_jderobot._t_Pose3DData, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_jderobot.Pose3D = Pose3D
    del Pose3D

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'Color' not in _M_jderobot.__dict__:
    _M_jderobot.Color = Ice.createTempClass()
    class Color(object):
        def __init__(self, r=0.0, g=0.0, b=0.0):
            self.r = r
            self.g = g
            self.b = b

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.Color):
                return NotImplemented
            else:
                if self.r != other.r:
                    return False
                if self.g != other.g:
                    return False
                if self.b != other.b:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Color)

        __repr__ = __str__

    _M_jderobot._t_Color = IcePy.defineStruct('::jderobot::Color', Color, (), (
        ('r', (), IcePy._t_float),
        ('g', (), IcePy._t_float),
        ('b', (), IcePy._t_float)
    ))

    _M_jderobot.Color = Color
    del Color

if 'RGBSegment' not in _M_jderobot.__dict__:
    _M_jderobot.RGBSegment = Ice.createTempClass()
    class RGBSegment(object):
        def __init__(self, seg=Ice._struct_marker, c=Ice._struct_marker):
            if seg is Ice._struct_marker:
                self.seg = _M_jderobot.Segment()
            else:
                self.seg = seg
            if c is Ice._struct_marker:
                self.c = _M_jderobot.Color()
            else:
                self.c = c

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.RGBSegment):
                return NotImplemented
            else:
                if self.seg != other.seg:
                    return False
                if self.c != other.c:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_RGBSegment)

        __repr__ = __str__

    _M_jderobot._t_RGBSegment = IcePy.defineStruct('::jderobot::RGBSegment', RGBSegment, (), (
        ('seg', (), _M_jderobot._t_Segment),
        ('c', (), _M_jderobot._t_Color)
    ))

    _M_jderobot.RGBSegment = RGBSegment
    del RGBSegment

if '_t_Segments' not in _M_jderobot.__dict__:
    _M_jderobot._t_Segments = IcePy.defineSequence('::jderobot::Segments', (), _M_jderobot._t_RGBSegment)

if '_t_Points' not in _M_jderobot.__dict__:
    _M_jderobot._t_Points = IcePy.defineSequence('::jderobot::Points', (), _M_jderobot._t_RGBPoint)

if '_t_File' not in _M_jderobot.__dict__:
    _M_jderobot._t_File = IcePy.defineSequence('::jderobot::File', (), IcePy._t_byte)

if 'bufferSegments' not in _M_jderobot.__dict__:
    _M_jderobot.bufferSegments = Ice.createTempClass()
    class bufferSegments(object):
        def __init__(self, buffer=None, refresh=False):
            self.buffer = buffer
            self.refresh = refresh

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.bufferSegments):
                return NotImplemented
            else:
                if self.buffer != other.buffer:
                    return False
                if self.refresh != other.refresh:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_bufferSegments)

        __repr__ = __str__

    _M_jderobot._t_bufferSegments = IcePy.defineStruct('::jderobot::bufferSegments', bufferSegments, (), (
        ('buffer', (), _M_jderobot._t_Segments),
        ('refresh', (), IcePy._t_bool)
    ))

    _M_jderobot.bufferSegments = bufferSegments
    del bufferSegments

if 'bufferPoints' not in _M_jderobot.__dict__:
    _M_jderobot.bufferPoints = Ice.createTempClass()
    class bufferPoints(object):
        def __init__(self, buffer=None, refresh=False):
            self.buffer = buffer
            self.refresh = refresh

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.bufferPoints):
                return NotImplemented
            else:
                if self.buffer != other.buffer:
                    return False
                if self.refresh != other.refresh:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_bufferPoints)

        __repr__ = __str__

    _M_jderobot._t_bufferPoints = IcePy.defineStruct('::jderobot::bufferPoints', bufferPoints, (), (
        ('buffer', (), _M_jderobot._t_Points),
        ('refresh', (), IcePy._t_bool)
    ))

    _M_jderobot.bufferPoints = bufferPoints
    del bufferPoints

if 'object3d' not in _M_jderobot.__dict__:
    _M_jderobot.object3d = Ice.createTempClass()
    class object3d(object):
        def __init__(self, obj='', id='', format=''):
            self.obj = obj
            self.id = id
            self.format = format

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.obj)
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.format)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_jderobot.object3d):
                return NotImplemented
            else:
                if self.obj is None or other.obj is None:
                    if self.obj != other.obj:
                        return (-1 if self.obj is None else 1)
                else:
                    if self.obj < other.obj:
                        return -1
                    elif self.obj > other.obj:
                        return 1
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.format is None or other.format is None:
                    if self.format != other.format:
                        return (-1 if self.format is None else 1)
                else:
                    if self.format < other.format:
                        return -1
                    elif self.format > other.format:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_object3d)

        __repr__ = __str__

    _M_jderobot._t_object3d = IcePy.defineStruct('::jderobot::object3d', object3d, (), (
        ('obj', (), IcePy._t_string),
        ('id', (), IcePy._t_string),
        ('format', (), IcePy._t_string)
    ))

    _M_jderobot.object3d = object3d
    del object3d

if 'PoseObj3D' not in _M_jderobot.__dict__:
    _M_jderobot.PoseObj3D = Ice.createTempClass()
    class PoseObj3D(object):
        def __init__(self, id='', pos=None):
            self.id = id
            self.pos = pos

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.PoseObj3D):
                return NotImplemented
            else:
                if self.id != other.id:
                    return False
                if self.pos != other.pos:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_PoseObj3D)

        __repr__ = __str__

    _M_jderobot._t_PoseObj3D = IcePy.defineStruct('::jderobot::PoseObj3D', PoseObj3D, (), (
        ('id', (), IcePy._t_string),
        ('pos', (), _M_jderobot._t_Pose3DData)
    ))

    _M_jderobot.PoseObj3D = PoseObj3D
    del PoseObj3D

if '_t_bufferPoseObj3D' not in _M_jderobot.__dict__:
    _M_jderobot._t_bufferPoseObj3D = IcePy.defineSequence('::jderobot::bufferPoseObj3D', (), _M_jderobot._t_PoseObj3D)

_M_jderobot._t_Visualization = IcePy.defineValue('::jderobot::Visualization', Ice.Value, -1, (), False, True, None, ())

if 'VisualizationPrx' not in _M_jderobot.__dict__:
    _M_jderobot.VisualizationPrx = Ice.createTempClass()
    class VisualizationPrx(Ice.ObjectPrx):

        def drawSegment(self, bseg, context=None):
            return _M_jderobot.Visualization._op_drawSegment.invoke(self, ((bseg, ), context))

        def drawSegmentAsync(self, bseg, context=None):
            return _M_jderobot.Visualization._op_drawSegment.invokeAsync(self, ((bseg, ), context))

        def begin_drawSegment(self, bseg, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Visualization._op_drawSegment.begin(self, ((bseg, ), _response, _ex, _sent, context))

        def end_drawSegment(self, _r):
            return _M_jderobot.Visualization._op_drawSegment.end(self, _r)

        def getSegment(self, context=None):
            return _M_jderobot.Visualization._op_getSegment.invoke(self, ((), context))

        def getSegmentAsync(self, context=None):
            return _M_jderobot.Visualization._op_getSegment.invokeAsync(self, ((), context))

        def begin_getSegment(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Visualization._op_getSegment.begin(self, ((), _response, _ex, _sent, context))

        def end_getSegment(self, _r):
            return _M_jderobot.Visualization._op_getSegment.end(self, _r)

        def drawPoint(self, bpnts, context=None):
            return _M_jderobot.Visualization._op_drawPoint.invoke(self, ((bpnts, ), context))

        def drawPointAsync(self, bpnts, context=None):
            return _M_jderobot.Visualization._op_drawPoint.invokeAsync(self, ((bpnts, ), context))

        def begin_drawPoint(self, bpnts, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Visualization._op_drawPoint.begin(self, ((bpnts, ), _response, _ex, _sent, context))

        def end_drawPoint(self, _r):
            return _M_jderobot.Visualization._op_drawPoint.end(self, _r)

        def getPoints(self, context=None):
            return _M_jderobot.Visualization._op_getPoints.invoke(self, ((), context))

        def getPointsAsync(self, context=None):
            return _M_jderobot.Visualization._op_getPoints.invokeAsync(self, ((), context))

        def begin_getPoints(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Visualization._op_getPoints.begin(self, ((), _response, _ex, _sent, context))

        def end_getPoints(self, _r):
            return _M_jderobot.Visualization._op_getPoints.end(self, _r)

        def getObj3D(self, id, context=None):
            return _M_jderobot.Visualization._op_getObj3D.invoke(self, ((id, ), context))

        def getObj3DAsync(self, id, context=None):
            return _M_jderobot.Visualization._op_getObj3D.invokeAsync(self, ((id, ), context))

        def begin_getObj3D(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Visualization._op_getObj3D.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_getObj3D(self, _r):
            return _M_jderobot.Visualization._op_getObj3D.end(self, _r)

        def getPoseObj3DData(self, context=None):
            return _M_jderobot.Visualization._op_getPoseObj3DData.invoke(self, ((), context))

        def getPoseObj3DDataAsync(self, context=None):
            return _M_jderobot.Visualization._op_getPoseObj3DData.invokeAsync(self, ((), context))

        def begin_getPoseObj3DData(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Visualization._op_getPoseObj3DData.begin(self, ((), _response, _ex, _sent, context))

        def end_getPoseObj3DData(self, _r):
            return _M_jderobot.Visualization._op_getPoseObj3DData.end(self, _r)

        def clearAll(self, context=None):
            return _M_jderobot.Visualization._op_clearAll.invoke(self, ((), context))

        def clearAllAsync(self, context=None):
            return _M_jderobot.Visualization._op_clearAll.invokeAsync(self, ((), context))

        def begin_clearAll(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Visualization._op_clearAll.begin(self, ((), _response, _ex, _sent, context))

        def end_clearAll(self, _r):
            return _M_jderobot.Visualization._op_clearAll.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_jderobot.VisualizationPrx.ice_checkedCast(proxy, '::jderobot::Visualization', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.VisualizationPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::jderobot::Visualization'
    _M_jderobot._t_VisualizationPrx = IcePy.defineProxy('::jderobot::Visualization', VisualizationPrx)

    _M_jderobot.VisualizationPrx = VisualizationPrx
    del VisualizationPrx

    _M_jderobot.Visualization = Ice.createTempClass()
    class Visualization(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::Visualization')

        def ice_id(self, current=None):
            return '::jderobot::Visualization'

        @staticmethod
        def ice_staticId():
            return '::jderobot::Visualization'

        def drawSegment(self, bseg, current=None):
            raise NotImplementedError("servant method 'drawSegment' not implemented")

        def getSegment(self, current=None):
            raise NotImplementedError("servant method 'getSegment' not implemented")

        def drawPoint(self, bpnts, current=None):
            raise NotImplementedError("servant method 'drawPoint' not implemented")

        def getPoints(self, current=None):
            raise NotImplementedError("servant method 'getPoints' not implemented")

        def getObj3D(self, id, current=None):
            raise NotImplementedError("servant method 'getObj3D' not implemented")

        def getPoseObj3DData(self, current=None):
            raise NotImplementedError("servant method 'getPoseObj3DData' not implemented")

        def clearAll(self, current=None):
            raise NotImplementedError("servant method 'clearAll' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_VisualizationDisp)

        __repr__ = __str__

    _M_jderobot._t_VisualizationDisp = IcePy.defineClass('::jderobot::Visualization', Visualization, (), None, ())
    Visualization._ice_type = _M_jderobot._t_VisualizationDisp

    Visualization._op_drawSegment = IcePy.Operation('drawSegment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_jderobot._t_bufferSegments, False, 0),), (), None, ())
    Visualization._op_getSegment = IcePy.Operation('getSegment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_jderobot._t_bufferSegments, False, 0), ())
    Visualization._op_drawPoint = IcePy.Operation('drawPoint', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_jderobot._t_bufferPoints, False, 0),), (), None, ())
    Visualization._op_getPoints = IcePy.Operation('getPoints', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_jderobot._t_bufferPoints, False, 0), ())
    Visualization._op_getObj3D = IcePy.Operation('getObj3D', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_jderobot._t_object3d, False, 0), ())
    Visualization._op_getPoseObj3DData = IcePy.Operation('getPoseObj3DData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_jderobot._t_bufferPoseObj3D, False, 0), ())
    Visualization._op_clearAll = IcePy.Operation('clearAll', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_jderobot.Visualization = Visualization
    del Visualization

# End of module jderobot
