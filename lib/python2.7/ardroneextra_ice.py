# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `ardroneextra.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

_M_jderobot._t_ArDroneExtra = IcePy.defineValue('::jderobot::ArDroneExtra', Ice.Value, -1, (), False, True, None, ())

if 'ArDroneExtraPrx' not in _M_jderobot.__dict__:
    _M_jderobot.ArDroneExtraPrx = Ice.createTempClass()
    class ArDroneExtraPrx(Ice.ObjectPrx):

        def toggleCam(self, context=None):
            return _M_jderobot.ArDroneExtra._op_toggleCam.invoke(self, ((), context))

        def toggleCamAsync(self, context=None):
            return _M_jderobot.ArDroneExtra._op_toggleCam.invokeAsync(self, ((), context))

        def begin_toggleCam(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.ArDroneExtra._op_toggleCam.begin(self, ((), _response, _ex, _sent, context))

        def end_toggleCam(self, _r):
            return _M_jderobot.ArDroneExtra._op_toggleCam.end(self, _r)

        def land(self, context=None):
            return _M_jderobot.ArDroneExtra._op_land.invoke(self, ((), context))

        def landAsync(self, context=None):
            return _M_jderobot.ArDroneExtra._op_land.invokeAsync(self, ((), context))

        def begin_land(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.ArDroneExtra._op_land.begin(self, ((), _response, _ex, _sent, context))

        def end_land(self, _r):
            return _M_jderobot.ArDroneExtra._op_land.end(self, _r)

        def takeoff(self, context=None):
            return _M_jderobot.ArDroneExtra._op_takeoff.invoke(self, ((), context))

        def takeoffAsync(self, context=None):
            return _M_jderobot.ArDroneExtra._op_takeoff.invokeAsync(self, ((), context))

        def begin_takeoff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.ArDroneExtra._op_takeoff.begin(self, ((), _response, _ex, _sent, context))

        def end_takeoff(self, _r):
            return _M_jderobot.ArDroneExtra._op_takeoff.end(self, _r)

        def reset(self, context=None):
            return _M_jderobot.ArDroneExtra._op_reset.invoke(self, ((), context))

        def resetAsync(self, context=None):
            return _M_jderobot.ArDroneExtra._op_reset.invokeAsync(self, ((), context))

        def begin_reset(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.ArDroneExtra._op_reset.begin(self, ((), _response, _ex, _sent, context))

        def end_reset(self, _r):
            return _M_jderobot.ArDroneExtra._op_reset.end(self, _r)

        def recordOnUsb(self, record, context=None):
            return _M_jderobot.ArDroneExtra._op_recordOnUsb.invoke(self, ((record, ), context))

        def recordOnUsbAsync(self, record, context=None):
            return _M_jderobot.ArDroneExtra._op_recordOnUsb.invokeAsync(self, ((record, ), context))

        def begin_recordOnUsb(self, record, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.ArDroneExtra._op_recordOnUsb.begin(self, ((record, ), _response, _ex, _sent, context))

        def end_recordOnUsb(self, _r):
            return _M_jderobot.ArDroneExtra._op_recordOnUsb.end(self, _r)

        def ledAnimation(self, type, duration, req, context=None):
            return _M_jderobot.ArDroneExtra._op_ledAnimation.invoke(self, ((type, duration, req), context))

        def ledAnimationAsync(self, type, duration, req, context=None):
            return _M_jderobot.ArDroneExtra._op_ledAnimation.invokeAsync(self, ((type, duration, req), context))

        def begin_ledAnimation(self, type, duration, req, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.ArDroneExtra._op_ledAnimation.begin(self, ((type, duration, req), _response, _ex, _sent, context))

        def end_ledAnimation(self, _r):
            return _M_jderobot.ArDroneExtra._op_ledAnimation.end(self, _r)

        def flightAnimation(self, type, duration, context=None):
            return _M_jderobot.ArDroneExtra._op_flightAnimation.invoke(self, ((type, duration), context))

        def flightAnimationAsync(self, type, duration, context=None):
            return _M_jderobot.ArDroneExtra._op_flightAnimation.invokeAsync(self, ((type, duration), context))

        def begin_flightAnimation(self, type, duration, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.ArDroneExtra._op_flightAnimation.begin(self, ((type, duration), _response, _ex, _sent, context))

        def end_flightAnimation(self, _r):
            return _M_jderobot.ArDroneExtra._op_flightAnimation.end(self, _r)

        def flatTrim(self, context=None):
            return _M_jderobot.ArDroneExtra._op_flatTrim.invoke(self, ((), context))

        def flatTrimAsync(self, context=None):
            return _M_jderobot.ArDroneExtra._op_flatTrim.invokeAsync(self, ((), context))

        def begin_flatTrim(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.ArDroneExtra._op_flatTrim.begin(self, ((), _response, _ex, _sent, context))

        def end_flatTrim(self, _r):
            return _M_jderobot.ArDroneExtra._op_flatTrim.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_jderobot.ArDroneExtraPrx.ice_checkedCast(proxy, '::jderobot::ArDroneExtra', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.ArDroneExtraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::jderobot::ArDroneExtra'
    _M_jderobot._t_ArDroneExtraPrx = IcePy.defineProxy('::jderobot::ArDroneExtra', ArDroneExtraPrx)

    _M_jderobot.ArDroneExtraPrx = ArDroneExtraPrx
    del ArDroneExtraPrx

    _M_jderobot.ArDroneExtra = Ice.createTempClass()
    class ArDroneExtra(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::ArDroneExtra')

        def ice_id(self, current=None):
            return '::jderobot::ArDroneExtra'

        @staticmethod
        def ice_staticId():
            return '::jderobot::ArDroneExtra'

        def toggleCam(self, current=None):
            raise NotImplementedError("servant method 'toggleCam' not implemented")

        def land(self, current=None):
            raise NotImplementedError("servant method 'land' not implemented")

        def takeoff(self, current=None):
            raise NotImplementedError("servant method 'takeoff' not implemented")

        def reset(self, current=None):
            raise NotImplementedError("servant method 'reset' not implemented")

        def recordOnUsb(self, record, current=None):
            raise NotImplementedError("servant method 'recordOnUsb' not implemented")

        def ledAnimation(self, type, duration, req, current=None):
            raise NotImplementedError("servant method 'ledAnimation' not implemented")

        def flightAnimation(self, type, duration, current=None):
            raise NotImplementedError("servant method 'flightAnimation' not implemented")

        def flatTrim(self, current=None):
            raise NotImplementedError("servant method 'flatTrim' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_ArDroneExtraDisp)

        __repr__ = __str__

    _M_jderobot._t_ArDroneExtraDisp = IcePy.defineClass('::jderobot::ArDroneExtra', ArDroneExtra, (), None, ())
    ArDroneExtra._ice_type = _M_jderobot._t_ArDroneExtraDisp

    ArDroneExtra._op_toggleCam = IcePy.Operation('toggleCam', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ArDroneExtra._op_land = IcePy.Operation('land', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ArDroneExtra._op_takeoff = IcePy.Operation('takeoff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ArDroneExtra._op_reset = IcePy.Operation('reset', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ArDroneExtra._op_recordOnUsb = IcePy.Operation('recordOnUsb', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    ArDroneExtra._op_ledAnimation = IcePy.Operation('ledAnimation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0)), (), None, ())
    ArDroneExtra._op_flightAnimation = IcePy.Operation('flightAnimation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_float, False, 0)), (), None, ())
    ArDroneExtra._op_flatTrim = IcePy.Operation('flatTrim', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_jderobot.ArDroneExtra = ArDroneExtra
    del ArDroneExtra

# End of module jderobot
