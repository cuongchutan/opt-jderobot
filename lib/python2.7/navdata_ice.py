# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `navdata.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if '_t_arrayInt' not in _M_jderobot.__dict__:
    _M_jderobot._t_arrayInt = IcePy.defineSequence('::jderobot::arrayInt', (), IcePy._t_int)

if '_t_arrayFloat' not in _M_jderobot.__dict__:
    _M_jderobot._t_arrayFloat = IcePy.defineSequence('::jderobot::arrayFloat', (), IcePy._t_float)

if 'NavdataData' not in _M_jderobot.__dict__:
    _M_jderobot.NavdataData = Ice.createTempClass()
    class NavdataData(Ice.Value):
        def __init__(self, vehicle=0, state=0, batteryPercent=0.0, magX=0, magY=0, magZ=0, pressure=0, temp=0, windSpeed=0.0, windAngle=0.0, windCompAngle=0.0, rotX=0.0, rotY=0.0, rotZ=0.0, altd=0, vx=0.0, vy=0.0, vz=0.0, ax=0.0, ay=0.0, az=0.0, tagsCount=0, tagsType=None, tagsXc=None, tagsYc=None, tagsWidth=None, tagsHeight=None, tagsOrientation=None, tagsDistance=None, tm=0.0):
            self.vehicle = vehicle
            self.state = state
            self.batteryPercent = batteryPercent
            self.magX = magX
            self.magY = magY
            self.magZ = magZ
            self.pressure = pressure
            self.temp = temp
            self.windSpeed = windSpeed
            self.windAngle = windAngle
            self.windCompAngle = windCompAngle
            self.rotX = rotX
            self.rotY = rotY
            self.rotZ = rotZ
            self.altd = altd
            self.vx = vx
            self.vy = vy
            self.vz = vz
            self.ax = ax
            self.ay = ay
            self.az = az
            self.tagsCount = tagsCount
            self.tagsType = tagsType
            self.tagsXc = tagsXc
            self.tagsYc = tagsYc
            self.tagsWidth = tagsWidth
            self.tagsHeight = tagsHeight
            self.tagsOrientation = tagsOrientation
            self.tagsDistance = tagsDistance
            self.tm = tm

        def ice_id(self):
            return '::jderobot::NavdataData'

        @staticmethod
        def ice_staticId():
            return '::jderobot::NavdataData'

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_NavdataData)

        __repr__ = __str__

    _M_jderobot._t_NavdataData = IcePy.defineValue('::jderobot::NavdataData', NavdataData, -1, (), False, False, None, (
        ('vehicle', (), IcePy._t_int, False, 0),
        ('state', (), IcePy._t_int, False, 0),
        ('batteryPercent', (), IcePy._t_float, False, 0),
        ('magX', (), IcePy._t_int, False, 0),
        ('magY', (), IcePy._t_int, False, 0),
        ('magZ', (), IcePy._t_int, False, 0),
        ('pressure', (), IcePy._t_int, False, 0),
        ('temp', (), IcePy._t_int, False, 0),
        ('windSpeed', (), IcePy._t_float, False, 0),
        ('windAngle', (), IcePy._t_float, False, 0),
        ('windCompAngle', (), IcePy._t_float, False, 0),
        ('rotX', (), IcePy._t_float, False, 0),
        ('rotY', (), IcePy._t_float, False, 0),
        ('rotZ', (), IcePy._t_float, False, 0),
        ('altd', (), IcePy._t_int, False, 0),
        ('vx', (), IcePy._t_float, False, 0),
        ('vy', (), IcePy._t_float, False, 0),
        ('vz', (), IcePy._t_float, False, 0),
        ('ax', (), IcePy._t_float, False, 0),
        ('ay', (), IcePy._t_float, False, 0),
        ('az', (), IcePy._t_float, False, 0),
        ('tagsCount', (), IcePy._t_int, False, 0),
        ('tagsType', (), _M_jderobot._t_arrayInt, False, 0),
        ('tagsXc', (), _M_jderobot._t_arrayInt, False, 0),
        ('tagsYc', (), _M_jderobot._t_arrayInt, False, 0),
        ('tagsWidth', (), _M_jderobot._t_arrayInt, False, 0),
        ('tagsHeight', (), _M_jderobot._t_arrayInt, False, 0),
        ('tagsOrientation', (), _M_jderobot._t_arrayFloat, False, 0),
        ('tagsDistance', (), _M_jderobot._t_arrayFloat, False, 0),
        ('tm', (), IcePy._t_float, False, 0)
    ))
    NavdataData._ice_type = _M_jderobot._t_NavdataData

    _M_jderobot.NavdataData = NavdataData
    del NavdataData

_M_jderobot._t_Navdata = IcePy.defineValue('::jderobot::Navdata', Ice.Value, -1, (), False, True, None, ())

if 'NavdataPrx' not in _M_jderobot.__dict__:
    _M_jderobot.NavdataPrx = Ice.createTempClass()
    class NavdataPrx(Ice.ObjectPrx):

        def getNavdata(self, context=None):
            return _M_jderobot.Navdata._op_getNavdata.invoke(self, ((), context))

        def getNavdataAsync(self, context=None):
            return _M_jderobot.Navdata._op_getNavdata.invokeAsync(self, ((), context))

        def begin_getNavdata(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_jderobot.Navdata._op_getNavdata.begin(self, ((), _response, _ex, _sent, context))

        def end_getNavdata(self, _r):
            return _M_jderobot.Navdata._op_getNavdata.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_jderobot.NavdataPrx.ice_checkedCast(proxy, '::jderobot::Navdata', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.NavdataPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::jderobot::Navdata'
    _M_jderobot._t_NavdataPrx = IcePy.defineProxy('::jderobot::Navdata', NavdataPrx)

    _M_jderobot.NavdataPrx = NavdataPrx
    del NavdataPrx

    _M_jderobot.Navdata = Ice.createTempClass()
    class Navdata(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::Navdata')

        def ice_id(self, current=None):
            return '::jderobot::Navdata'

        @staticmethod
        def ice_staticId():
            return '::jderobot::Navdata'

        def getNavdata(self, current=None):
            raise NotImplementedError("servant method 'getNavdata' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_NavdataDisp)

        __repr__ = __str__

    _M_jderobot._t_NavdataDisp = IcePy.defineClass('::jderobot::Navdata', Navdata, (), None, ())
    Navdata._ice_type = _M_jderobot._t_NavdataDisp

    Navdata._op_getNavdata = IcePy.Operation('getNavdata', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_jderobot._t_NavdataData, False, 0), ())

    _M_jderobot.Navdata = Navdata
    del Navdata

# End of module jderobot
