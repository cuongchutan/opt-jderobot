//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `pose3dmotors.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_pose3dmotors_h__
#define __jderobot_pose3dmotors_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class Pose3DMotorsData;
class Pose3DMotorsParams;
class Pose3DMotors;
class Pose3DMotorsPrx;

}

namespace jderobot
{

/**
 * Interface to the Pose3DMotors Actuators interaction.
 */
class Pose3DMotors : public virtual ::Ice::Object
{
public:

    using ProxyType = Pose3DMotorsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual int setPose3DMotorsData(::std::shared_ptr<Pose3DMotorsData> data, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setPose3DMotorsData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<Pose3DMotorsData> getPose3DMotorsData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPose3DMotorsData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<Pose3DMotorsParams> getPose3DMotorsParams(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPose3DMotorsParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

/**
 * Pose3DMotorsData a class that contains the pantilt data
 */
class Pose3DMotorsData : public ::Ice::ValueHelper<Pose3DMotorsData, ::Ice::Value>
{
public:

    virtual ~Pose3DMotorsData();

    Pose3DMotorsData() = default;

    Pose3DMotorsData(const Pose3DMotorsData&) = default;
    Pose3DMotorsData(Pose3DMotorsData&&) = default;
    Pose3DMotorsData& operator=(const Pose3DMotorsData&) = default;
    Pose3DMotorsData& operator=(Pose3DMotorsData&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Pose3DMotorsData(float x, float y, float z, float pan, float tilt, float roll, float panSpeed, float tiltSpeed) :
        x(x),
        y(y),
        z(z),
        pan(pan),
        tilt(tilt),
        roll(roll),
        panSpeed(panSpeed),
        tiltSpeed(tiltSpeed)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, pan, tilt, roll, panSpeed, tiltSpeed);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    float x;
    float y;
    float z;
    float pan;
    float tilt;
    float roll;
    float panSpeed;
    float tiltSpeed;
};

/// \cond INTERNAL
static Pose3DMotorsData _iceS_Pose3DMotorsData_init;
/// \endcond

/**
 * Pose3DMotorsParams a class that contains the motors parametres.
 */
class Pose3DMotorsParams : public ::Ice::ValueHelper<Pose3DMotorsParams, ::Ice::Value>
{
public:

    virtual ~Pose3DMotorsParams();

    Pose3DMotorsParams() = default;

    Pose3DMotorsParams(const Pose3DMotorsParams&) = default;
    Pose3DMotorsParams(Pose3DMotorsParams&&) = default;
    Pose3DMotorsParams& operator=(const Pose3DMotorsParams&) = default;
    Pose3DMotorsParams& operator=(Pose3DMotorsParams&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Pose3DMotorsParams(float maxPan, float minPan, float maxTilt, float minTilt, float maxPanSpeed, float maxTiltSpeed) :
        maxPan(maxPan),
        minPan(minPan),
        maxTilt(maxTilt),
        minTilt(minTilt),
        maxPanSpeed(maxPanSpeed),
        maxTiltSpeed(maxTiltSpeed)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(maxPan, minPan, maxTilt, minTilt, maxPanSpeed, maxTiltSpeed);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    float maxPan;
    float minPan;
    float maxTilt;
    float minTilt;
    float maxPanSpeed;
    float maxTiltSpeed;
};

}

namespace jderobot
{

/**
 * Interface to the Pose3DMotors Actuators interaction.
 */
class Pose3DMotorsPrx : public virtual ::Ice::Proxy<Pose3DMotorsPrx, ::Ice::ObjectPrx>
{
public:

    int setPose3DMotorsData(const ::std::shared_ptr<Pose3DMotorsData>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &Pose3DMotorsPrx::_iceI_setPose3DMotorsData, data, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPose3DMotorsDataAsync(const ::std::shared_ptr<Pose3DMotorsData>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &Pose3DMotorsPrx::_iceI_setPose3DMotorsData, data, context);
    }

    ::std::function<void()>
    setPose3DMotorsDataAsync(const ::std::shared_ptr<Pose3DMotorsData>& data,
                             ::std::function<void(int)> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &jderobot::Pose3DMotorsPrx::_iceI_setPose3DMotorsData, data, context);
    }

    /// \cond INTERNAL
    void _iceI_setPose3DMotorsData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::std::shared_ptr<Pose3DMotorsData>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<Pose3DMotorsData> getPose3DMotorsData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::Pose3DMotorsData>>(true, this, &Pose3DMotorsPrx::_iceI_getPose3DMotorsData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPose3DMotorsDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::Pose3DMotorsData>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::Pose3DMotorsData>, P>(false, this, &Pose3DMotorsPrx::_iceI_getPose3DMotorsData, context);
    }

    ::std::function<void()>
    getPose3DMotorsDataAsync(::std::function<void(::std::shared_ptr<::jderobot::Pose3DMotorsData>)> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::Pose3DMotorsData>>(response, ex, sent, this, &jderobot::Pose3DMotorsPrx::_iceI_getPose3DMotorsData, context);
    }

    /// \cond INTERNAL
    void _iceI_getPose3DMotorsData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::Pose3DMotorsData>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<Pose3DMotorsParams> getPose3DMotorsParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::Pose3DMotorsParams>>(true, this, &Pose3DMotorsPrx::_iceI_getPose3DMotorsParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPose3DMotorsParamsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::Pose3DMotorsParams>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::Pose3DMotorsParams>, P>(false, this, &Pose3DMotorsPrx::_iceI_getPose3DMotorsParams, context);
    }

    ::std::function<void()>
    getPose3DMotorsParamsAsync(::std::function<void(::std::shared_ptr<::jderobot::Pose3DMotorsParams>)> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::Pose3DMotorsParams>>(response, ex, sent, this, &jderobot::Pose3DMotorsPrx::_iceI_getPose3DMotorsParams, context);
    }

    /// \cond INTERNAL
    void _iceI_getPose3DMotorsParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::Pose3DMotorsParams>>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    Pose3DMotorsPrx() = default;
    friend ::std::shared_ptr<Pose3DMotorsPrx> IceInternal::createProxy<Pose3DMotorsPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::jderobot::Pose3DMotorsData, S>
{
    static void read(S* istr, ::jderobot::Pose3DMotorsData& v)
    {
        istr->readAll(v.x, v.y, v.z, v.pan, v.tilt, v.roll, v.panSpeed, v.tiltSpeed);
    }
};

template<typename S>
struct StreamReader<::jderobot::Pose3DMotorsParams, S>
{
    static void read(S* istr, ::jderobot::Pose3DMotorsParams& v)
    {
        istr->readAll(v.maxPan, v.minPan, v.maxTilt, v.minTilt, v.maxPanSpeed, v.maxTiltSpeed);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using Pose3DMotorsDataPtr = ::std::shared_ptr<Pose3DMotorsData>;

using Pose3DMotorsParamsPtr = ::std::shared_ptr<Pose3DMotorsParams>;

using Pose3DMotorsPtr = ::std::shared_ptr<Pose3DMotors>;
using Pose3DMotorsPrxPtr = ::std::shared_ptr<Pose3DMotorsPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class Pose3DMotorsData;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Pose3DMotorsData>&);
::IceProxy::Ice::Object* upCast(Pose3DMotorsData*);
/// \endcond

class Pose3DMotorsParams;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Pose3DMotorsParams>&);
::IceProxy::Ice::Object* upCast(Pose3DMotorsParams*);
/// \endcond

class Pose3DMotors;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Pose3DMotors>&);
::IceProxy::Ice::Object* upCast(Pose3DMotors*);
/// \endcond

}

}

namespace jderobot
{

class Pose3DMotorsData;
/// \cond INTERNAL
::Ice::Object* upCast(Pose3DMotorsData*);
/// \endcond
typedef ::IceInternal::Handle< Pose3DMotorsData> Pose3DMotorsDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Pose3DMotorsData> Pose3DMotorsDataPrx;
typedef Pose3DMotorsDataPrx Pose3DMotorsDataPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Pose3DMotorsDataPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Pose3DMotorsParams;
/// \cond INTERNAL
::Ice::Object* upCast(Pose3DMotorsParams*);
/// \endcond
typedef ::IceInternal::Handle< Pose3DMotorsParams> Pose3DMotorsParamsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Pose3DMotorsParams> Pose3DMotorsParamsPrx;
typedef Pose3DMotorsParamsPrx Pose3DMotorsParamsPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Pose3DMotorsParamsPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Pose3DMotors;
/// \cond INTERNAL
::Ice::Object* upCast(Pose3DMotors*);
/// \endcond
typedef ::IceInternal::Handle< Pose3DMotors> Pose3DMotorsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Pose3DMotors> Pose3DMotorsPrx;
typedef Pose3DMotorsPrx Pose3DMotorsPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Pose3DMotorsPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_setPose3DMotorsData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_setPose3DMotorsData.
 */
class Callback_Pose3DMotors_setPose3DMotorsData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pose3DMotors_setPose3DMotorsData_Base> Callback_Pose3DMotors_setPose3DMotorsDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_getPose3DMotorsData.
 */
class Callback_Pose3DMotors_getPose3DMotorsData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pose3DMotors_getPose3DMotorsData_Base> Callback_Pose3DMotors_getPose3DMotorsDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsParams.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_getPose3DMotorsParams.
 */
class Callback_Pose3DMotors_getPose3DMotorsParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pose3DMotors_getPose3DMotorsParams_Base> Callback_Pose3DMotors_getPose3DMotorsParamsPtr;

}

namespace IceProxy
{

namespace jderobot
{

class Pose3DMotorsData : public virtual ::Ice::Proxy<Pose3DMotorsData, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Pose3DMotorsParams : public virtual ::Ice::Proxy<Pose3DMotorsParams, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Pose3DMotors : public virtual ::Ice::Proxy<Pose3DMotors, ::IceProxy::Ice::Object>
{
public:

    ::Ice::Int setPose3DMotorsData(const ::jderobot::Pose3DMotorsDataPtr& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_setPose3DMotorsData(_iceI_begin_setPose3DMotorsData(data, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPose3DMotorsData(const ::jderobot::Pose3DMotorsDataPtr& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPose3DMotorsData(data, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPose3DMotorsData(const ::jderobot::Pose3DMotorsDataPtr& data, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPose3DMotorsData(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose3DMotorsData(const ::jderobot::Pose3DMotorsDataPtr& data, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPose3DMotorsData(data, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose3DMotorsData(const ::jderobot::Pose3DMotorsDataPtr& data, const ::jderobot::Callback_Pose3DMotors_setPose3DMotorsDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPose3DMotorsData(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose3DMotorsData(const ::jderobot::Pose3DMotorsDataPtr& data, const ::Ice::Context& context, const ::jderobot::Callback_Pose3DMotors_setPose3DMotorsDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPose3DMotorsData(data, context, cb, cookie);
    }

    ::Ice::Int end_setPose3DMotorsData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPose3DMotorsData(const ::jderobot::Pose3DMotorsDataPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::Pose3DMotorsDataPtr getPose3DMotorsData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPose3DMotorsData(_iceI_begin_getPose3DMotorsData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPose3DMotorsData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DMotorsData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DMotorsData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsData(const ::jderobot::Callback_Pose3DMotors_getPose3DMotorsDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DMotorsData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsData(const ::Ice::Context& context, const ::jderobot::Callback_Pose3DMotors_getPose3DMotorsDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DMotorsData(context, cb, cookie);
    }

    ::jderobot::Pose3DMotorsDataPtr end_getPose3DMotorsData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPose3DMotorsData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::Pose3DMotorsParamsPtr getPose3DMotorsParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPose3DMotorsParams(_iceI_begin_getPose3DMotorsParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPose3DMotorsParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsParams(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DMotorsParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DMotorsParams(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsParams(const ::jderobot::Callback_Pose3DMotors_getPose3DMotorsParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DMotorsParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DMotorsParams(const ::Ice::Context& context, const ::jderobot::Callback_Pose3DMotors_getPose3DMotorsParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DMotorsParams(context, cb, cookie);
    }

    ::jderobot::Pose3DMotorsParamsPtr end_getPose3DMotorsParams(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPose3DMotorsParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

/**
 * Pose3DMotorsData a class that contains the pantilt data
 */
class Pose3DMotorsData : public virtual ::Ice::Object
{
public:

    typedef Pose3DMotorsDataPrx ProxyType;
    typedef Pose3DMotorsDataPtr PointerType;

    virtual ~Pose3DMotorsData();

    Pose3DMotorsData()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Pose3DMotorsData(::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float pan, ::Ice::Float tilt, ::Ice::Float roll, ::Ice::Float panSpeed, ::Ice::Float tiltSpeed) :
        x(x),
        y(y),
        z(z),
        pan(pan),
        tilt(tilt),
        roll(roll),
        panSpeed(panSpeed),
        tiltSpeed(tiltSpeed)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float pan;
    ::Ice::Float tilt;
    ::Ice::Float roll;
    ::Ice::Float panSpeed;
    ::Ice::Float tiltSpeed;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Pose3DMotorsData_init = ::jderobot::Pose3DMotorsData::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Pose3DMotorsData& lhs, const Pose3DMotorsData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Pose3DMotorsData& lhs, const Pose3DMotorsData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

/**
 * Pose3DMotorsParams a class that contains the motors parametres.
 */
class Pose3DMotorsParams : public virtual ::Ice::Object
{
public:

    typedef Pose3DMotorsParamsPrx ProxyType;
    typedef Pose3DMotorsParamsPtr PointerType;

    virtual ~Pose3DMotorsParams();

    Pose3DMotorsParams()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Pose3DMotorsParams(::Ice::Float maxPan, ::Ice::Float minPan, ::Ice::Float maxTilt, ::Ice::Float minTilt, ::Ice::Float maxPanSpeed, ::Ice::Float maxTiltSpeed) :
        maxPan(maxPan),
        minPan(minPan),
        maxTilt(maxTilt),
        minTilt(minTilt),
        maxPanSpeed(maxPanSpeed),
        maxTiltSpeed(maxTiltSpeed)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Float maxPan;
    ::Ice::Float minPan;
    ::Ice::Float maxTilt;
    ::Ice::Float minTilt;
    ::Ice::Float maxPanSpeed;
    ::Ice::Float maxTiltSpeed;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Pose3DMotorsParams_init = ::jderobot::Pose3DMotorsParams::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Pose3DMotorsParams& lhs, const Pose3DMotorsParams& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Pose3DMotorsParams& lhs, const Pose3DMotorsParams& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

/**
 * Interface to the Pose3DMotors Actuators interaction.
 */
class Pose3DMotors : public virtual ::Ice::Object
{
public:

    typedef Pose3DMotorsPrx ProxyType;
    typedef Pose3DMotorsPtr PointerType;

    virtual ~Pose3DMotors();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int setPose3DMotorsData(const Pose3DMotorsDataPtr& data, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setPose3DMotorsData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Pose3DMotorsDataPtr getPose3DMotorsData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPose3DMotorsData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Pose3DMotorsParamsPtr getPose3DMotorsParams(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPose3DMotorsParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Pose3DMotors& lhs, const Pose3DMotors& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Pose3DMotors& lhs, const Pose3DMotors& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::jderobot::Pose3DMotorsData, S>
{
    static void write(S* ostr, const ::jderobot::Pose3DMotorsData& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.pan);
        ostr->write(v.tilt);
        ostr->write(v.roll);
        ostr->write(v.panSpeed);
        ostr->write(v.tiltSpeed);
    }
};

template<typename S>
struct StreamReader< ::jderobot::Pose3DMotorsData, S>
{
    static void read(S* istr, ::jderobot::Pose3DMotorsData& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.pan);
        istr->read(v.tilt);
        istr->read(v.roll);
        istr->read(v.panSpeed);
        istr->read(v.tiltSpeed);
    }
};

template<typename S>
struct StreamWriter< ::jderobot::Pose3DMotorsParams, S>
{
    static void write(S* ostr, const ::jderobot::Pose3DMotorsParams& v)
    {
        ostr->write(v.maxPan);
        ostr->write(v.minPan);
        ostr->write(v.maxTilt);
        ostr->write(v.minTilt);
        ostr->write(v.maxPanSpeed);
        ostr->write(v.maxTiltSpeed);
    }
};

template<typename S>
struct StreamReader< ::jderobot::Pose3DMotorsParams, S>
{
    static void read(S* istr, ::jderobot::Pose3DMotorsParams& v)
    {
        istr->read(v.maxPan);
        istr->read(v.minPan);
        istr->read(v.maxTilt);
        istr->read(v.minTilt);
        istr->read(v.maxPanSpeed);
        istr->read(v.maxTiltSpeed);
    }
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_setPose3DMotorsData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_setPose3DMotorsData.
 */
template<class T>
class CallbackNC_Pose3DMotors_setPose3DMotorsData : public Callback_Pose3DMotors_setPose3DMotorsData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Pose3DMotors_setPose3DMotorsData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DMotorsPrx proxy = Pose3DMotorsPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_setPose3DMotorsData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_setPose3DMotorsData.
 */
template<class T> Callback_Pose3DMotors_setPose3DMotorsDataPtr
newCallback_Pose3DMotors_setPose3DMotorsData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3DMotors_setPose3DMotorsData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_setPose3DMotorsData.
 */
template<class T> Callback_Pose3DMotors_setPose3DMotorsDataPtr
newCallback_Pose3DMotors_setPose3DMotorsData(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3DMotors_setPose3DMotorsData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_setPose3DMotorsData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_setPose3DMotorsData.
 */
template<class T, typename CT>
class Callback_Pose3DMotors_setPose3DMotorsData : public Callback_Pose3DMotors_setPose3DMotorsData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Pose3DMotors_setPose3DMotorsData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DMotorsPrx proxy = Pose3DMotorsPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_setPose3DMotorsData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_setPose3DMotorsData.
 */
template<class T, typename CT> Callback_Pose3DMotors_setPose3DMotorsDataPtr
newCallback_Pose3DMotors_setPose3DMotorsData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3DMotors_setPose3DMotorsData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_setPose3DMotorsData.
 */
template<class T, typename CT> Callback_Pose3DMotors_setPose3DMotorsDataPtr
newCallback_Pose3DMotors_setPose3DMotorsData(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3DMotors_setPose3DMotorsData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_getPose3DMotorsData.
 */
template<class T>
class CallbackNC_Pose3DMotors_getPose3DMotorsData : public Callback_Pose3DMotors_getPose3DMotorsData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Pose3DMotorsDataPtr&);

    CallbackNC_Pose3DMotors_getPose3DMotorsData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DMotorsPrx proxy = Pose3DMotorsPrx::uncheckedCast(result->getProxy());
        Pose3DMotorsDataPtr ret;
        try
        {
            ret = proxy->end_getPose3DMotorsData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsData.
 */
template<class T> Callback_Pose3DMotors_getPose3DMotorsDataPtr
newCallback_Pose3DMotors_getPose3DMotorsData(const IceUtil::Handle<T>& instance, void (T::*cb)(const Pose3DMotorsDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3DMotors_getPose3DMotorsData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsData.
 */
template<class T> Callback_Pose3DMotors_getPose3DMotorsDataPtr
newCallback_Pose3DMotors_getPose3DMotorsData(T* instance, void (T::*cb)(const Pose3DMotorsDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3DMotors_getPose3DMotorsData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_getPose3DMotorsData.
 */
template<class T, typename CT>
class Callback_Pose3DMotors_getPose3DMotorsData : public Callback_Pose3DMotors_getPose3DMotorsData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Pose3DMotorsDataPtr&, const CT&);

    Callback_Pose3DMotors_getPose3DMotorsData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DMotorsPrx proxy = Pose3DMotorsPrx::uncheckedCast(result->getProxy());
        Pose3DMotorsDataPtr ret;
        try
        {
            ret = proxy->end_getPose3DMotorsData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsData.
 */
template<class T, typename CT> Callback_Pose3DMotors_getPose3DMotorsDataPtr
newCallback_Pose3DMotors_getPose3DMotorsData(const IceUtil::Handle<T>& instance, void (T::*cb)(const Pose3DMotorsDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3DMotors_getPose3DMotorsData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsData.
 */
template<class T, typename CT> Callback_Pose3DMotors_getPose3DMotorsDataPtr
newCallback_Pose3DMotors_getPose3DMotorsData(T* instance, void (T::*cb)(const Pose3DMotorsDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3DMotors_getPose3DMotorsData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsParams.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_getPose3DMotorsParams.
 */
template<class T>
class CallbackNC_Pose3DMotors_getPose3DMotorsParams : public Callback_Pose3DMotors_getPose3DMotorsParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Pose3DMotorsParamsPtr&);

    CallbackNC_Pose3DMotors_getPose3DMotorsParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DMotorsPrx proxy = Pose3DMotorsPrx::uncheckedCast(result->getProxy());
        Pose3DMotorsParamsPtr ret;
        try
        {
            ret = proxy->end_getPose3DMotorsParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsParams.
 */
template<class T> Callback_Pose3DMotors_getPose3DMotorsParamsPtr
newCallback_Pose3DMotors_getPose3DMotorsParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const Pose3DMotorsParamsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3DMotors_getPose3DMotorsParams<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsParams.
 */
template<class T> Callback_Pose3DMotors_getPose3DMotorsParamsPtr
newCallback_Pose3DMotors_getPose3DMotorsParams(T* instance, void (T::*cb)(const Pose3DMotorsParamsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3DMotors_getPose3DMotorsParams<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsParams.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3DMotors_getPose3DMotorsParams.
 */
template<class T, typename CT>
class Callback_Pose3DMotors_getPose3DMotorsParams : public Callback_Pose3DMotors_getPose3DMotorsParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Pose3DMotorsParamsPtr&, const CT&);

    Callback_Pose3DMotors_getPose3DMotorsParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DMotorsPrx proxy = Pose3DMotorsPrx::uncheckedCast(result->getProxy());
        Pose3DMotorsParamsPtr ret;
        try
        {
            ret = proxy->end_getPose3DMotorsParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsParams.
 */
template<class T, typename CT> Callback_Pose3DMotors_getPose3DMotorsParamsPtr
newCallback_Pose3DMotors_getPose3DMotorsParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const Pose3DMotorsParamsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3DMotors_getPose3DMotorsParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3DMotors::begin_getPose3DMotorsParams.
 */
template<class T, typename CT> Callback_Pose3DMotors_getPose3DMotorsParamsPtr
newCallback_Pose3DMotors_getPose3DMotorsParams(T* instance, void (T::*cb)(const Pose3DMotorsParamsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3DMotors_getPose3DMotorsParams<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
