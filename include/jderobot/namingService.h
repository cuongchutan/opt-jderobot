//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `namingService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_namingService_h__
#define __jderobot_namingService_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class NamingNode;
class NodeContainer;
class NamingService;
class NamingServicePrx;

}

namespace jderobot
{

class NameAlreadyExistException : public ::Ice::UserExceptionHelper<NameAlreadyExistException, JderobotException>
{
public:

    virtual ~NameAlreadyExistException();

    NameAlreadyExistException(const NameAlreadyExistException&) = default;

    NameAlreadyExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    NameAlreadyExistException(const ::std::string& what) :
        ::Ice::UserExceptionHelper<NameAlreadyExistException, JderobotException>(::std::move(what))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static NameAlreadyExistException _iceS_NameAlreadyExistException_init;
/// \endcond

class NameNotExistException : public ::Ice::UserExceptionHelper<NameNotExistException, JderobotException>
{
public:

    virtual ~NameNotExistException();

    NameNotExistException(const NameNotExistException&) = default;

    NameNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    NameNotExistException(const ::std::string& what) :
        ::Ice::UserExceptionHelper<NameNotExistException, JderobotException>(::std::move(what))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class InterfaceNotExistException : public ::Ice::UserExceptionHelper<InterfaceNotExistException, JderobotException>
{
public:

    virtual ~InterfaceNotExistException();

    InterfaceNotExistException(const InterfaceNotExistException&) = default;

    InterfaceNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    InterfaceNotExistException(const ::std::string& what) :
        ::Ice::UserExceptionHelper<InterfaceNotExistException, JderobotException>(::std::move(what))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

using nodeList = ::std::vector<::std::shared_ptr<NamingNode>>;

}

namespace jderobot
{

class NamingService : public virtual ::Ice::Object
{
public:

    using ProxyType = NamingServicePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void bind(::std::shared_ptr<NamingNode> node, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_bind(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unbind(::std::shared_ptr<NamingNode> node, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unbind(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<NodeContainer> resolveByName(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_resolveByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<NodeContainer> resolveByInterface(::std::string interfaceName, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_resolveByInterface(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

class NamingNode : public ::Ice::ValueHelper<NamingNode, ::Ice::Value>
{
public:

    virtual ~NamingNode();

    NamingNode() = default;

    NamingNode(const NamingNode&) = default;
    NamingNode(NamingNode&&) = default;
    NamingNode& operator=(const NamingNode&) = default;
    NamingNode& operator=(NamingNode&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    NamingNode(const ::std::string& name, const ::std::string& interfaceName, const ::std::string& protocol, const ::std::string& ip, int port) :
        name(::std::move(name)),
        interfaceName(::std::move(interfaceName)),
        protocol(::std::move(protocol)),
        ip(::std::move(ip)),
        port(port)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const int&> ice_tuple() const
    {
        return std::tie(name, interfaceName, protocol, ip, port);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string name;
    ::std::string interfaceName;
    ::std::string protocol;
    ::std::string ip;
    int port;
};

/// \cond INTERNAL
static NamingNode _iceS_NamingNode_init;
/// \endcond

class NodeContainer : public ::Ice::ValueHelper<NodeContainer, ::Ice::Value>
{
public:

    virtual ~NodeContainer();

    NodeContainer() = default;

    NodeContainer(const NodeContainer&) = default;
    NodeContainer(NodeContainer&&) = default;
    NodeContainer& operator=(const NodeContainer&) = default;
    NodeContainer& operator=(NodeContainer&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit NodeContainer(const ::jderobot::nodeList& nodes) :
        nodes(::std::move(nodes))
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::jderobot::nodeList&> ice_tuple() const
    {
        return std::tie(nodes);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::jderobot::nodeList nodes;
};

}

namespace jderobot
{

class NamingServicePrx : public virtual ::Ice::Proxy<NamingServicePrx, ::Ice::ObjectPrx>
{
public:

    void bind(const ::std::shared_ptr<NamingNode>& node, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &NamingServicePrx::_iceI_bind, node, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto bindAsync(const ::std::shared_ptr<NamingNode>& node, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &NamingServicePrx::_iceI_bind, node, context);
    }

    ::std::function<void()>
    bindAsync(const ::std::shared_ptr<NamingNode>& node,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::NamingServicePrx::_iceI_bind, node, context);
    }

    /// \cond INTERNAL
    void _iceI_bind(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<NamingNode>&, const ::Ice::Context&);
    /// \endcond

    void unbind(const ::std::shared_ptr<NamingNode>& node, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &NamingServicePrx::_iceI_unbind, node, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto unbindAsync(const ::std::shared_ptr<NamingNode>& node, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &NamingServicePrx::_iceI_unbind, node, context);
    }

    ::std::function<void()>
    unbindAsync(const ::std::shared_ptr<NamingNode>& node,
                ::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::NamingServicePrx::_iceI_unbind, node, context);
    }

    /// \cond INTERNAL
    void _iceI_unbind(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<NamingNode>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<NodeContainer> resolveByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::NodeContainer>>(true, this, &NamingServicePrx::_iceI_resolveByName, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resolveByNameAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::NodeContainer>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::NodeContainer>, P>(false, this, &NamingServicePrx::_iceI_resolveByName, name, context);
    }

    ::std::function<void()>
    resolveByNameAsync(const ::std::string& name,
                       ::std::function<void(::std::shared_ptr<::jderobot::NodeContainer>)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::NodeContainer>>(response, ex, sent, this, &jderobot::NamingServicePrx::_iceI_resolveByName, name, context);
    }

    /// \cond INTERNAL
    void _iceI_resolveByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::NodeContainer>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<NodeContainer> resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::NodeContainer>>(true, this, &NamingServicePrx::_iceI_resolveByInterface, interfaceName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resolveByInterfaceAsync(const ::std::string& interfaceName, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::NodeContainer>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::NodeContainer>, P>(false, this, &NamingServicePrx::_iceI_resolveByInterface, interfaceName, context);
    }

    ::std::function<void()>
    resolveByInterfaceAsync(const ::std::string& interfaceName,
                            ::std::function<void(::std::shared_ptr<::jderobot::NodeContainer>)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::NodeContainer>>(response, ex, sent, this, &jderobot::NamingServicePrx::_iceI_resolveByInterface, interfaceName, context);
    }

    /// \cond INTERNAL
    void _iceI_resolveByInterface(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::NodeContainer>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    NamingServicePrx() = default;
    friend ::std::shared_ptr<NamingServicePrx> IceInternal::createProxy<NamingServicePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::jderobot::NameAlreadyExistException, S>
{
    static void write(S*, const ::jderobot::NameAlreadyExistException&)
    {
    }
};

template<typename S>
struct StreamReader<::jderobot::NameAlreadyExistException, S>
{
    static void read(S*, ::jderobot::NameAlreadyExistException&)
    {
    }
};

template<typename S>
struct StreamWriter<::jderobot::NameNotExistException, S>
{
    static void write(S*, const ::jderobot::NameNotExistException&)
    {
    }
};

template<typename S>
struct StreamReader<::jderobot::NameNotExistException, S>
{
    static void read(S*, ::jderobot::NameNotExistException&)
    {
    }
};

template<typename S>
struct StreamWriter<::jderobot::InterfaceNotExistException, S>
{
    static void write(S*, const ::jderobot::InterfaceNotExistException&)
    {
    }
};

template<typename S>
struct StreamReader<::jderobot::InterfaceNotExistException, S>
{
    static void read(S*, ::jderobot::InterfaceNotExistException&)
    {
    }
};

template<typename S>
struct StreamReader<::jderobot::NamingNode, S>
{
    static void read(S* istr, ::jderobot::NamingNode& v)
    {
        istr->readAll(v.name, v.interfaceName, v.protocol, v.ip, v.port);
    }
};

template<typename S>
struct StreamReader<::jderobot::NodeContainer, S>
{
    static void read(S* istr, ::jderobot::NodeContainer& v)
    {
        istr->readAll(v.nodes);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using NamingNodePtr = ::std::shared_ptr<NamingNode>;

using NodeContainerPtr = ::std::shared_ptr<NodeContainer>;

using NamingServicePtr = ::std::shared_ptr<NamingService>;
using NamingServicePrxPtr = ::std::shared_ptr<NamingServicePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class NamingNode;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< NamingNode>&);
::IceProxy::Ice::Object* upCast(NamingNode*);
/// \endcond

class NodeContainer;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< NodeContainer>&);
::IceProxy::Ice::Object* upCast(NodeContainer*);
/// \endcond

class NamingService;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< NamingService>&);
::IceProxy::Ice::Object* upCast(NamingService*);
/// \endcond

}

}

namespace jderobot
{

class NamingNode;
/// \cond INTERNAL
::Ice::Object* upCast(NamingNode*);
/// \endcond
typedef ::IceInternal::Handle< NamingNode> NamingNodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingNode> NamingNodePrx;
typedef NamingNodePrx NamingNodePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(NamingNodePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class NodeContainer;
/// \cond INTERNAL
::Ice::Object* upCast(NodeContainer*);
/// \endcond
typedef ::IceInternal::Handle< NodeContainer> NodeContainerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NodeContainer> NodeContainerPrx;
typedef NodeContainerPrx NodeContainerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(NodeContainerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class NamingService;
/// \cond INTERNAL
::Ice::Object* upCast(NamingService*);
/// \endcond
typedef ::IceInternal::Handle< NamingService> NamingServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingService> NamingServicePrx;
typedef NamingServicePrx NamingServicePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(NamingServicePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

class NameAlreadyExistException : public JderobotException
{
public:

    NameAlreadyExistException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit NameAlreadyExistException(const ::std::string& what);
    virtual ~NameAlreadyExistException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NameAlreadyExistException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static NameAlreadyExistException _iceS_NameAlreadyExistException_init;
/// \endcond

class NameNotExistException : public JderobotException
{
public:

    NameNotExistException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit NameNotExistException(const ::std::string& what);
    virtual ~NameNotExistException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NameNotExistException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class InterfaceNotExistException : public JderobotException
{
public:

    InterfaceNotExistException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit InterfaceNotExistException(const ::std::string& what);
    virtual ~InterfaceNotExistException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual InterfaceNotExistException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

typedef ::std::vector<NamingNodePtr> nodeList;

}

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::NamingService::begin_bind.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_bind.
 */
class Callback_NamingService_bind_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NamingService_bind_Base> Callback_NamingService_bindPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::NamingService::begin_unbind.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_unbind.
 */
class Callback_NamingService_unbind_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NamingService_unbind_Base> Callback_NamingService_unbindPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::NamingService::begin_resolveByName.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_resolveByName.
 */
class Callback_NamingService_resolveByName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NamingService_resolveByName_Base> Callback_NamingService_resolveByNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::NamingService::begin_resolveByInterface.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_resolveByInterface.
 */
class Callback_NamingService_resolveByInterface_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NamingService_resolveByInterface_Base> Callback_NamingService_resolveByInterfacePtr;

}

namespace IceProxy
{

namespace jderobot
{

class NamingNode : public virtual ::Ice::Proxy<NamingNode, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class NodeContainer : public virtual ::Ice::Proxy<NodeContainer, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class NamingService : public virtual ::Ice::Proxy<NamingService, ::IceProxy::Ice::Object>
{
public:

    void bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_bind(_iceI_begin_bind(node, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_bind(node, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_bind(node, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_bind(node, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::jderobot::Callback_NamingService_bindPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_bind(node, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_bind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& context, const ::jderobot::Callback_NamingService_bindPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_bind(node, context, cb, cookie);
    }

    void end_bind(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_bind(const ::jderobot::NamingNodePtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_unbind(_iceI_begin_unbind(node, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_unbind(node, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unbind(node, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unbind(node, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::jderobot::Callback_NamingService_unbindPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unbind(node, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unbind(const ::jderobot::NamingNodePtr& node, const ::Ice::Context& context, const ::jderobot::Callback_NamingService_unbindPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unbind(node, context, cb, cookie);
    }

    void end_unbind(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_unbind(const ::jderobot::NamingNodePtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::NodeContainerPtr resolveByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_resolveByName(_iceI_begin_resolveByName(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_resolveByName(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resolveByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resolveByName(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::jderobot::Callback_NamingService_resolveByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resolveByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByName(const ::std::string& name, const ::Ice::Context& context, const ::jderobot::Callback_NamingService_resolveByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resolveByName(name, context, cb, cookie);
    }

    ::jderobot::NodeContainerPtr end_resolveByName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_resolveByName(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::NodeContainerPtr resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_resolveByInterface(_iceI_begin_resolveByInterface(interfaceName, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_resolveByInterface(interfaceName, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resolveByInterface(interfaceName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resolveByInterface(interfaceName, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::jderobot::Callback_NamingService_resolveByInterfacePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resolveByInterface(interfaceName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resolveByInterface(const ::std::string& interfaceName, const ::Ice::Context& context, const ::jderobot::Callback_NamingService_resolveByInterfacePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resolveByInterface(interfaceName, context, cb, cookie);
    }

    ::jderobot::NodeContainerPtr end_resolveByInterface(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_resolveByInterface(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

class NamingNode : public virtual ::Ice::Object
{
public:

    typedef NamingNodePrx ProxyType;
    typedef NamingNodePtr PointerType;

    virtual ~NamingNode();

    NamingNode()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    NamingNode(const ::std::string& name, const ::std::string& interfaceName, const ::std::string& protocol, const ::std::string& ip, ::Ice::Int port) :
        name(name),
        interfaceName(interfaceName),
        protocol(protocol),
        ip(ip),
        port(port)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::std::string name;
    ::std::string interfaceName;
    ::std::string protocol;
    ::std::string ip;
    ::Ice::Int port;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_NamingNode_init = ::jderobot::NamingNode::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const NamingNode& lhs, const NamingNode& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const NamingNode& lhs, const NamingNode& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class NodeContainer : public virtual ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef NodeContainerPrx ProxyType;
    typedef NodeContainerPtr PointerType;

    virtual ~NodeContainer();

    NodeContainer()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit NodeContainer(const ::jderobot::nodeList& nodes) :
        nodes(nodes)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::jderobot::nodeList nodes;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_NodeContainer_init = ::jderobot::NodeContainer::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const NodeContainer& lhs, const NodeContainer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const NodeContainer& lhs, const NodeContainer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class NamingService : public virtual ::Ice::Object
{
public:

    typedef NamingServicePrx ProxyType;
    typedef NamingServicePtr PointerType;

    virtual ~NamingService();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void bind(const NamingNodePtr& node, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_bind(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unbind(const NamingNodePtr& node, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_unbind(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual NodeContainerPtr resolveByName(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_resolveByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual NodeContainerPtr resolveByInterface(const ::std::string& interfaceName, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_resolveByInterface(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const NamingService& lhs, const NamingService& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const NamingService& lhs, const NamingService& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::jderobot::NameAlreadyExistException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::jderobot::NameNotExistException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::jderobot::InterfaceNotExistException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::jderobot::NamingNode, S>
{
    static void write(S* ostr, const ::jderobot::NamingNode& v)
    {
        ostr->write(v.name);
        ostr->write(v.interfaceName);
        ostr->write(v.protocol);
        ostr->write(v.ip);
        ostr->write(v.port);
    }
};

template<typename S>
struct StreamReader< ::jderobot::NamingNode, S>
{
    static void read(S* istr, ::jderobot::NamingNode& v)
    {
        istr->read(v.name);
        istr->read(v.interfaceName);
        istr->read(v.protocol);
        istr->read(v.ip);
        istr->read(v.port);
    }
};

template<typename S>
struct StreamWriter< ::jderobot::NodeContainer, S>
{
    static void write(S* ostr, const ::jderobot::NodeContainer& v)
    {
        ostr->write(v.nodes);
    }
};

template<typename S>
struct StreamReader< ::jderobot::NodeContainer, S>
{
    static void read(S* istr, ::jderobot::NodeContainer& v)
    {
        istr->read(v.nodes);
    }
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::NamingService::begin_bind.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_bind.
 */
template<class T>
class CallbackNC_NamingService_bind : public Callback_NamingService_bind_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NamingService_bind(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        NamingServicePrx proxy = NamingServicePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_bind(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_bind.
 */
template<class T> Callback_NamingService_bindPtr
newCallback_NamingService_bind(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_bind<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_bind.
 */
template<class T> Callback_NamingService_bindPtr
newCallback_NamingService_bind(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_bind<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_bind.
 */
template<class T> Callback_NamingService_bindPtr
newCallback_NamingService_bind(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_bind<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_bind.
 */
template<class T> Callback_NamingService_bindPtr
newCallback_NamingService_bind(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_bind<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::NamingService::begin_bind.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_bind.
 */
template<class T, typename CT>
class Callback_NamingService_bind : public Callback_NamingService_bind_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NamingService_bind(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        NamingServicePrx proxy = NamingServicePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_bind(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_bind.
 */
template<class T, typename CT> Callback_NamingService_bindPtr
newCallback_NamingService_bind(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_bind<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_bind.
 */
template<class T, typename CT> Callback_NamingService_bindPtr
newCallback_NamingService_bind(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_bind<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_bind.
 */
template<class T, typename CT> Callback_NamingService_bindPtr
newCallback_NamingService_bind(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_bind<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_bind.
 */
template<class T, typename CT> Callback_NamingService_bindPtr
newCallback_NamingService_bind(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_bind<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::NamingService::begin_unbind.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_unbind.
 */
template<class T>
class CallbackNC_NamingService_unbind : public Callback_NamingService_unbind_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NamingService_unbind(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        NamingServicePrx proxy = NamingServicePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_unbind(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_unbind.
 */
template<class T> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_unbind<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_unbind.
 */
template<class T> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_unbind<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_unbind.
 */
template<class T> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_unbind<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_unbind.
 */
template<class T> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_unbind<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::NamingService::begin_unbind.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_unbind.
 */
template<class T, typename CT>
class Callback_NamingService_unbind : public Callback_NamingService_unbind_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NamingService_unbind(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        NamingServicePrx proxy = NamingServicePrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_unbind(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_unbind.
 */
template<class T, typename CT> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_unbind<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_unbind.
 */
template<class T, typename CT> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_unbind<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_unbind.
 */
template<class T, typename CT> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_unbind<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_unbind.
 */
template<class T, typename CT> Callback_NamingService_unbindPtr
newCallback_NamingService_unbind(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_unbind<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::NamingService::begin_resolveByName.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_resolveByName.
 */
template<class T>
class CallbackNC_NamingService_resolveByName : public Callback_NamingService_resolveByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NodeContainerPtr&);

    CallbackNC_NamingService_resolveByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        NamingServicePrx proxy = NamingServicePrx::uncheckedCast(result->getProxy());
        NodeContainerPtr ret;
        try
        {
            ret = proxy->end_resolveByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_resolveByName.
 */
template<class T> Callback_NamingService_resolveByNamePtr
newCallback_NamingService_resolveByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const NodeContainerPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_resolveByName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_resolveByName.
 */
template<class T> Callback_NamingService_resolveByNamePtr
newCallback_NamingService_resolveByName(T* instance, void (T::*cb)(const NodeContainerPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_resolveByName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::NamingService::begin_resolveByName.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_resolveByName.
 */
template<class T, typename CT>
class Callback_NamingService_resolveByName : public Callback_NamingService_resolveByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NodeContainerPtr&, const CT&);

    Callback_NamingService_resolveByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        NamingServicePrx proxy = NamingServicePrx::uncheckedCast(result->getProxy());
        NodeContainerPtr ret;
        try
        {
            ret = proxy->end_resolveByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_resolveByName.
 */
template<class T, typename CT> Callback_NamingService_resolveByNamePtr
newCallback_NamingService_resolveByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const NodeContainerPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_resolveByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_resolveByName.
 */
template<class T, typename CT> Callback_NamingService_resolveByNamePtr
newCallback_NamingService_resolveByName(T* instance, void (T::*cb)(const NodeContainerPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_resolveByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::NamingService::begin_resolveByInterface.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_resolveByInterface.
 */
template<class T>
class CallbackNC_NamingService_resolveByInterface : public Callback_NamingService_resolveByInterface_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NodeContainerPtr&);

    CallbackNC_NamingService_resolveByInterface(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        NamingServicePrx proxy = NamingServicePrx::uncheckedCast(result->getProxy());
        NodeContainerPtr ret;
        try
        {
            ret = proxy->end_resolveByInterface(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_resolveByInterface.
 */
template<class T> Callback_NamingService_resolveByInterfacePtr
newCallback_NamingService_resolveByInterface(const IceUtil::Handle<T>& instance, void (T::*cb)(const NodeContainerPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_resolveByInterface<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_resolveByInterface.
 */
template<class T> Callback_NamingService_resolveByInterfacePtr
newCallback_NamingService_resolveByInterface(T* instance, void (T::*cb)(const NodeContainerPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NamingService_resolveByInterface<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::NamingService::begin_resolveByInterface.
 * Create a wrapper instance by calling ::jderobot::newCallback_NamingService_resolveByInterface.
 */
template<class T, typename CT>
class Callback_NamingService_resolveByInterface : public Callback_NamingService_resolveByInterface_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NodeContainerPtr&, const CT&);

    Callback_NamingService_resolveByInterface(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        NamingServicePrx proxy = NamingServicePrx::uncheckedCast(result->getProxy());
        NodeContainerPtr ret;
        try
        {
            ret = proxy->end_resolveByInterface(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_resolveByInterface.
 */
template<class T, typename CT> Callback_NamingService_resolveByInterfacePtr
newCallback_NamingService_resolveByInterface(const IceUtil::Handle<T>& instance, void (T::*cb)(const NodeContainerPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_resolveByInterface<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::NamingService::begin_resolveByInterface.
 */
template<class T, typename CT> Callback_NamingService_resolveByInterfacePtr
newCallback_NamingService_resolveByInterface(T* instance, void (T::*cb)(const NodeContainerPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NamingService_resolveByInterface<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
