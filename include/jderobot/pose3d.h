//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `pose3d.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_pose3d_h__
#define __jderobot_pose3d_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class Pose3DData;
class Pose3D;
class Pose3DPrx;

}

namespace jderobot
{

/**
 * Interface to the Pose3D.
 */
class Pose3D : public virtual ::Ice::Object
{
public:

    using ProxyType = Pose3DPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<Pose3DData> getPose3DData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPose3DData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int setPose3DData(::std::shared_ptr<Pose3DData> data, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setPose3DData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

/**
 * Pose3D data information
 */
class Pose3DData : public ::Ice::ValueHelper<Pose3DData, ::Ice::Value>
{
public:

    virtual ~Pose3DData();

    Pose3DData() = default;

    Pose3DData(const Pose3DData&) = default;
    Pose3DData(Pose3DData&&) = default;
    Pose3DData& operator=(const Pose3DData&) = default;
    Pose3DData& operator=(Pose3DData&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Pose3DData(float x, float y, float z, float h, float q0, float q1, float q2, float q3) :
        x(x),
        y(y),
        z(z),
        h(h),
        q0(q0),
        q1(q1),
        q2(q2),
        q3(q3)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, h, q0, q1, q2, q3);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    float x;
    float y;
    float z;
    float h;
    float q0;
    float q1;
    float q2;
    float q3;
};

/// \cond INTERNAL
static Pose3DData _iceS_Pose3DData_init;
/// \endcond

}

namespace jderobot
{

/**
 * Interface to the Pose3D.
 */
class Pose3DPrx : public virtual ::Ice::Proxy<Pose3DPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<Pose3DData> getPose3DData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::Pose3DData>>(true, this, &Pose3DPrx::_iceI_getPose3DData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPose3DDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::Pose3DData>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::Pose3DData>, P>(false, this, &Pose3DPrx::_iceI_getPose3DData, context);
    }

    ::std::function<void()>
    getPose3DDataAsync(::std::function<void(::std::shared_ptr<::jderobot::Pose3DData>)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::Pose3DData>>(response, ex, sent, this, &jderobot::Pose3DPrx::_iceI_getPose3DData, context);
    }

    /// \cond INTERNAL
    void _iceI_getPose3DData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::Pose3DData>>>&, const ::Ice::Context&);
    /// \endcond

    int setPose3DData(const ::std::shared_ptr<Pose3DData>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &Pose3DPrx::_iceI_setPose3DData, data, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPose3DDataAsync(const ::std::shared_ptr<Pose3DData>& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &Pose3DPrx::_iceI_setPose3DData, data, context);
    }

    ::std::function<void()>
    setPose3DDataAsync(const ::std::shared_ptr<Pose3DData>& data,
                       ::std::function<void(int)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &jderobot::Pose3DPrx::_iceI_setPose3DData, data, context);
    }

    /// \cond INTERNAL
    void _iceI_setPose3DData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::std::shared_ptr<Pose3DData>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    Pose3DPrx() = default;
    friend ::std::shared_ptr<Pose3DPrx> IceInternal::createProxy<Pose3DPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::jderobot::Pose3DData, S>
{
    static void read(S* istr, ::jderobot::Pose3DData& v)
    {
        istr->readAll(v.x, v.y, v.z, v.h, v.q0, v.q1, v.q2, v.q3);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using Pose3DDataPtr = ::std::shared_ptr<Pose3DData>;

using Pose3DPtr = ::std::shared_ptr<Pose3D>;
using Pose3DPrxPtr = ::std::shared_ptr<Pose3DPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class Pose3DData;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Pose3DData>&);
::IceProxy::Ice::Object* upCast(Pose3DData*);
/// \endcond

class Pose3D;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Pose3D>&);
::IceProxy::Ice::Object* upCast(Pose3D*);
/// \endcond

}

}

namespace jderobot
{

class Pose3DData;
/// \cond INTERNAL
::Ice::Object* upCast(Pose3DData*);
/// \endcond
typedef ::IceInternal::Handle< Pose3DData> Pose3DDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Pose3DData> Pose3DDataPrx;
typedef Pose3DDataPrx Pose3DDataPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Pose3DDataPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Pose3D;
/// \cond INTERNAL
::Ice::Object* upCast(Pose3D*);
/// \endcond
typedef ::IceInternal::Handle< Pose3D> Pose3DPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Pose3D> Pose3DPrx;
typedef Pose3DPrx Pose3DPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Pose3DPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Pose3D::begin_getPose3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3D_getPose3DData.
 */
class Callback_Pose3D_getPose3DData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pose3D_getPose3DData_Base> Callback_Pose3D_getPose3DDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Pose3D::begin_setPose3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3D_setPose3DData.
 */
class Callback_Pose3D_setPose3DData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Pose3D_setPose3DData_Base> Callback_Pose3D_setPose3DDataPtr;

}

namespace IceProxy
{

namespace jderobot
{

class Pose3DData : public virtual ::Ice::Proxy<Pose3DData, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Pose3D : public virtual ::Ice::Proxy<Pose3D, ::IceProxy::Ice::Object>
{
public:

    ::jderobot::Pose3DDataPtr getPose3DData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPose3DData(_iceI_begin_getPose3DData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPose3DData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPose3DData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPose3DData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DData(const ::jderobot::Callback_Pose3D_getPose3DDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPose3DData(const ::Ice::Context& context, const ::jderobot::Callback_Pose3D_getPose3DDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPose3DData(context, cb, cookie);
    }

    ::jderobot::Pose3DDataPtr end_getPose3DData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPose3DData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int setPose3DData(const ::jderobot::Pose3DDataPtr& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_setPose3DData(_iceI_begin_setPose3DData(data, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPose3DData(const ::jderobot::Pose3DDataPtr& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPose3DData(data, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPose3DData(const ::jderobot::Pose3DDataPtr& data, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPose3DData(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose3DData(const ::jderobot::Pose3DDataPtr& data, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPose3DData(data, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose3DData(const ::jderobot::Pose3DDataPtr& data, const ::jderobot::Callback_Pose3D_setPose3DDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPose3DData(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPose3DData(const ::jderobot::Pose3DDataPtr& data, const ::Ice::Context& context, const ::jderobot::Callback_Pose3D_setPose3DDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPose3DData(data, context, cb, cookie);
    }

    ::Ice::Int end_setPose3DData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPose3DData(const ::jderobot::Pose3DDataPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

/**
 * Pose3D data information
 */
class Pose3DData : public virtual ::Ice::Object
{
public:

    typedef Pose3DDataPrx ProxyType;
    typedef Pose3DDataPtr PointerType;

    virtual ~Pose3DData();

    Pose3DData()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Pose3DData(::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float h, ::Ice::Float q0, ::Ice::Float q1, ::Ice::Float q2, ::Ice::Float q3) :
        x(x),
        y(y),
        z(z),
        h(h),
        q0(q0),
        q1(q1),
        q2(q2),
        q3(q3)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float h;
    ::Ice::Float q0;
    ::Ice::Float q1;
    ::Ice::Float q2;
    ::Ice::Float q3;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Pose3DData_init = ::jderobot::Pose3DData::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Pose3DData& lhs, const Pose3DData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Pose3DData& lhs, const Pose3DData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

/**
 * Interface to the Pose3D.
 */
class Pose3D : public virtual ::Ice::Object
{
public:

    typedef Pose3DPrx ProxyType;
    typedef Pose3DPtr PointerType;

    virtual ~Pose3D();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Pose3DDataPtr getPose3DData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPose3DData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int setPose3DData(const Pose3DDataPtr& data, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setPose3DData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Pose3D& lhs, const Pose3D& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Pose3D& lhs, const Pose3D& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::jderobot::Pose3DData, S>
{
    static void write(S* ostr, const ::jderobot::Pose3DData& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.h);
        ostr->write(v.q0);
        ostr->write(v.q1);
        ostr->write(v.q2);
        ostr->write(v.q3);
    }
};

template<typename S>
struct StreamReader< ::jderobot::Pose3DData, S>
{
    static void read(S* istr, ::jderobot::Pose3DData& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.h);
        istr->read(v.q0);
        istr->read(v.q1);
        istr->read(v.q2);
        istr->read(v.q3);
    }
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Pose3D::begin_getPose3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3D_getPose3DData.
 */
template<class T>
class CallbackNC_Pose3D_getPose3DData : public Callback_Pose3D_getPose3DData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Pose3DDataPtr&);

    CallbackNC_Pose3D_getPose3DData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DPrx proxy = Pose3DPrx::uncheckedCast(result->getProxy());
        Pose3DDataPtr ret;
        try
        {
            ret = proxy->end_getPose3DData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3D::begin_getPose3DData.
 */
template<class T> Callback_Pose3D_getPose3DDataPtr
newCallback_Pose3D_getPose3DData(const IceUtil::Handle<T>& instance, void (T::*cb)(const Pose3DDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3D_getPose3DData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3D::begin_getPose3DData.
 */
template<class T> Callback_Pose3D_getPose3DDataPtr
newCallback_Pose3D_getPose3DData(T* instance, void (T::*cb)(const Pose3DDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3D_getPose3DData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Pose3D::begin_getPose3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3D_getPose3DData.
 */
template<class T, typename CT>
class Callback_Pose3D_getPose3DData : public Callback_Pose3D_getPose3DData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Pose3DDataPtr&, const CT&);

    Callback_Pose3D_getPose3DData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DPrx proxy = Pose3DPrx::uncheckedCast(result->getProxy());
        Pose3DDataPtr ret;
        try
        {
            ret = proxy->end_getPose3DData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3D::begin_getPose3DData.
 */
template<class T, typename CT> Callback_Pose3D_getPose3DDataPtr
newCallback_Pose3D_getPose3DData(const IceUtil::Handle<T>& instance, void (T::*cb)(const Pose3DDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3D_getPose3DData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3D::begin_getPose3DData.
 */
template<class T, typename CT> Callback_Pose3D_getPose3DDataPtr
newCallback_Pose3D_getPose3DData(T* instance, void (T::*cb)(const Pose3DDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3D_getPose3DData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Pose3D::begin_setPose3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3D_setPose3DData.
 */
template<class T>
class CallbackNC_Pose3D_setPose3DData : public Callback_Pose3D_setPose3DData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Pose3D_setPose3DData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DPrx proxy = Pose3DPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_setPose3DData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3D::begin_setPose3DData.
 */
template<class T> Callback_Pose3D_setPose3DDataPtr
newCallback_Pose3D_setPose3DData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3D_setPose3DData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3D::begin_setPose3DData.
 */
template<class T> Callback_Pose3D_setPose3DDataPtr
newCallback_Pose3D_setPose3DData(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Pose3D_setPose3DData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Pose3D::begin_setPose3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Pose3D_setPose3DData.
 */
template<class T, typename CT>
class Callback_Pose3D_setPose3DData : public Callback_Pose3D_setPose3DData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Pose3D_setPose3DData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Pose3DPrx proxy = Pose3DPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_setPose3DData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3D::begin_setPose3DData.
 */
template<class T, typename CT> Callback_Pose3D_setPose3DDataPtr
newCallback_Pose3D_setPose3DData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3D_setPose3DData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Pose3D::begin_setPose3DData.
 */
template<class T, typename CT> Callback_Pose3D_setPose3DDataPtr
newCallback_Pose3D_setPose3DData(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Pose3D_setPose3DData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
