//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `visualization.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_visualization_h__
#define __jderobot_visualization_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/common.h>
#include <jderobot/primitives.h>
#include <jderobot/pose3d.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class Visualization;
class VisualizationPrx;

}

namespace jderobot
{

struct Color
{
    float r;
    float g;
    float b;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(r, g, b);
    }
};

struct RGBSegment
{
    ::jderobot::Segment seg;
    ::jderobot::Color c;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::jderobot::Segment&, const ::jderobot::Color&> ice_tuple() const
    {
        return std::tie(seg, c);
    }
};

using Segments = ::std::vector<RGBSegment>;

using Points = ::std::vector<RGBPoint>;

using File = ::std::vector<::Ice::Byte>;

struct bufferSegments
{
    ::jderobot::Segments buffer;
    bool refresh;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::jderobot::Segments&, const bool&> ice_tuple() const
    {
        return std::tie(buffer, refresh);
    }
};

struct bufferPoints
{
    ::jderobot::Points buffer;
    bool refresh;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::jderobot::Points&, const bool&> ice_tuple() const
    {
        return std::tie(buffer, refresh);
    }
};

struct object3d
{
    ::std::string obj;
    ::std::string id;
    ::std::string format;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(obj, id, format);
    }
};

struct PoseObj3D
{
    ::std::string id;
    ::std::shared_ptr<::jderobot::Pose3DData> pos;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::shared_ptr<::jderobot::Pose3DData>&> ice_tuple() const
    {
        return std::tie(id, pos);
    }
};

using bufferPoseObj3D = ::std::vector<PoseObj3D>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace jderobot
{

/**
 * Interface to the Visualization interaction.
 */
class Visualization : public virtual ::Ice::Object
{
public:

    using ProxyType = VisualizationPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void drawSegment(bufferSegments bseg, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_drawSegment(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bufferSegments getSegment(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getSegment(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void drawPoint(bufferPoints bpnts, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_drawPoint(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bufferPoints getPoints(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPoints(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual object3d getObj3D(::std::string id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getObj3D(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bufferPoseObj3D getPoseObj3DData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPoseObj3DData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void clearAll(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_clearAll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

/**
 * Interface to the Visualization interaction.
 */
class VisualizationPrx : public virtual ::Ice::Proxy<VisualizationPrx, ::Ice::ObjectPrx>
{
public:

    void drawSegment(const bufferSegments& bseg, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &VisualizationPrx::_iceI_drawSegment, bseg, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto drawSegmentAsync(const bufferSegments& bseg, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &VisualizationPrx::_iceI_drawSegment, bseg, context);
    }

    ::std::function<void()>
    drawSegmentAsync(const bufferSegments& bseg,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::VisualizationPrx::_iceI_drawSegment, bseg, context);
    }

    /// \cond INTERNAL
    void _iceI_drawSegment(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const bufferSegments&, const ::Ice::Context&);
    /// \endcond

    bufferSegments getSegment(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::jderobot::bufferSegments>(true, this, &VisualizationPrx::_iceI_getSegment, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getSegmentAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::jderobot::bufferSegments>>().get_future())
    {
        return _makePromiseOutgoing<::jderobot::bufferSegments, P>(false, this, &VisualizationPrx::_iceI_getSegment, context);
    }

    ::std::function<void()>
    getSegmentAsync(::std::function<void(::jderobot::bufferSegments)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::jderobot::bufferSegments>(response, ex, sent, this, &jderobot::VisualizationPrx::_iceI_getSegment, context);
    }

    /// \cond INTERNAL
    void _iceI_getSegment(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::jderobot::bufferSegments>>&, const ::Ice::Context&);
    /// \endcond

    void drawPoint(const bufferPoints& bpnts, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &VisualizationPrx::_iceI_drawPoint, bpnts, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto drawPointAsync(const bufferPoints& bpnts, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &VisualizationPrx::_iceI_drawPoint, bpnts, context);
    }

    ::std::function<void()>
    drawPointAsync(const bufferPoints& bpnts,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::VisualizationPrx::_iceI_drawPoint, bpnts, context);
    }

    /// \cond INTERNAL
    void _iceI_drawPoint(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const bufferPoints&, const ::Ice::Context&);
    /// \endcond

    bufferPoints getPoints(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::jderobot::bufferPoints>(true, this, &VisualizationPrx::_iceI_getPoints, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPointsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::jderobot::bufferPoints>>().get_future())
    {
        return _makePromiseOutgoing<::jderobot::bufferPoints, P>(false, this, &VisualizationPrx::_iceI_getPoints, context);
    }

    ::std::function<void()>
    getPointsAsync(::std::function<void(::jderobot::bufferPoints)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::jderobot::bufferPoints>(response, ex, sent, this, &jderobot::VisualizationPrx::_iceI_getPoints, context);
    }

    /// \cond INTERNAL
    void _iceI_getPoints(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::jderobot::bufferPoints>>&, const ::Ice::Context&);
    /// \endcond

    object3d getObj3D(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::jderobot::object3d>(true, this, &VisualizationPrx::_iceI_getObj3D, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getObj3DAsync(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::jderobot::object3d>>().get_future())
    {
        return _makePromiseOutgoing<::jderobot::object3d, P>(false, this, &VisualizationPrx::_iceI_getObj3D, id, context);
    }

    ::std::function<void()>
    getObj3DAsync(const ::std::string& id,
                  ::std::function<void(::jderobot::object3d)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::jderobot::object3d>(response, ex, sent, this, &jderobot::VisualizationPrx::_iceI_getObj3D, id, context);
    }

    /// \cond INTERNAL
    void _iceI_getObj3D(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::jderobot::object3d>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    bufferPoseObj3D getPoseObj3DData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::jderobot::bufferPoseObj3D>(true, this, &VisualizationPrx::_iceI_getPoseObj3DData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPoseObj3DDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::jderobot::bufferPoseObj3D>>().get_future())
    {
        return _makePromiseOutgoing<::jderobot::bufferPoseObj3D, P>(false, this, &VisualizationPrx::_iceI_getPoseObj3DData, context);
    }

    ::std::function<void()>
    getPoseObj3DDataAsync(::std::function<void(::jderobot::bufferPoseObj3D)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::jderobot::bufferPoseObj3D>(response, ex, sent, this, &jderobot::VisualizationPrx::_iceI_getPoseObj3DData, context);
    }

    /// \cond INTERNAL
    void _iceI_getPoseObj3DData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::jderobot::bufferPoseObj3D>>&, const ::Ice::Context&);
    /// \endcond

    void clearAll(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &VisualizationPrx::_iceI_clearAll, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto clearAllAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &VisualizationPrx::_iceI_clearAll, context);
    }

    ::std::function<void()>
    clearAllAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::VisualizationPrx::_iceI_clearAll, context);
    }

    /// \cond INTERNAL
    void _iceI_clearAll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    VisualizationPrx() = default;
    friend ::std::shared_ptr<VisualizationPrx> IceInternal::createProxy<VisualizationPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::jderobot::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::jderobot::Color, S>
{
    static void read(S* istr, ::jderobot::Color& v)
    {
        istr->readAll(v.r, v.g, v.b);
    }
};

template<>
struct StreamableTraits<::jderobot::RGBSegment>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::jderobot::RGBSegment, S>
{
    static void read(S* istr, ::jderobot::RGBSegment& v)
    {
        istr->readAll(v.seg, v.c);
    }
};

template<>
struct StreamableTraits<::jderobot::bufferSegments>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::jderobot::bufferSegments, S>
{
    static void read(S* istr, ::jderobot::bufferSegments& v)
    {
        istr->readAll(v.buffer, v.refresh);
    }
};

template<>
struct StreamableTraits<::jderobot::bufferPoints>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::jderobot::bufferPoints, S>
{
    static void read(S* istr, ::jderobot::bufferPoints& v)
    {
        istr->readAll(v.buffer, v.refresh);
    }
};

template<>
struct StreamableTraits<::jderobot::object3d>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::jderobot::object3d, S>
{
    static void read(S* istr, ::jderobot::object3d& v)
    {
        istr->readAll(v.obj, v.id, v.format);
    }
};

template<>
struct StreamableTraits<::jderobot::PoseObj3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::jderobot::PoseObj3D, S>
{
    static void read(S* istr, ::jderobot::PoseObj3D& v)
    {
        istr->readAll(v.id, v.pos);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using VisualizationPtr = ::std::shared_ptr<Visualization>;
using VisualizationPrxPtr = ::std::shared_ptr<VisualizationPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class Visualization;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Visualization>&);
::IceProxy::Ice::Object* upCast(Visualization*);
/// \endcond

}

}

namespace jderobot
{

class Visualization;
/// \cond INTERNAL
::Ice::Object* upCast(Visualization*);
/// \endcond
typedef ::IceInternal::Handle< Visualization> VisualizationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Visualization> VisualizationPrx;
typedef VisualizationPrx VisualizationPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(VisualizationPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

struct Color
{
    ::Ice::Float r;
    ::Ice::Float g;
    ::Ice::Float b;
};

struct RGBSegment
{
    ::jderobot::Segment seg;
    ::jderobot::Color c;
};

typedef ::std::vector<RGBSegment> Segments;

typedef ::std::vector<RGBPoint> Points;

typedef ::std::vector< ::Ice::Byte> File;

struct bufferSegments
{
    ::jderobot::Segments buffer;
    bool refresh;
};

struct bufferPoints
{
    ::jderobot::Points buffer;
    bool refresh;
};

struct object3d
{
    ::std::string obj;
    ::std::string id;
    ::std::string format;

    bool operator==(const object3d& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(obj != rhs_.obj)
        {
            return false;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(format != rhs_.format)
        {
            return false;
        }
        return true;
    }

    bool operator<(const object3d& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(obj < rhs_.obj)
        {
            return true;
        }
        else if(rhs_.obj < obj)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(format < rhs_.format)
        {
            return true;
        }
        else if(rhs_.format < format)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const object3d& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const object3d& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const object3d& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const object3d& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct PoseObj3D
{
    ::std::string id;
    ::jderobot::Pose3DDataPtr pos;
};

typedef ::std::vector<PoseObj3D> bufferPoseObj3D;

}

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Visualization::begin_drawSegment.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_drawSegment.
 */
class Callback_Visualization_drawSegment_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Visualization_drawSegment_Base> Callback_Visualization_drawSegmentPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Visualization::begin_getSegment.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getSegment.
 */
class Callback_Visualization_getSegment_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Visualization_getSegment_Base> Callback_Visualization_getSegmentPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Visualization::begin_drawPoint.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_drawPoint.
 */
class Callback_Visualization_drawPoint_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Visualization_drawPoint_Base> Callback_Visualization_drawPointPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Visualization::begin_getPoints.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getPoints.
 */
class Callback_Visualization_getPoints_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Visualization_getPoints_Base> Callback_Visualization_getPointsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Visualization::begin_getObj3D.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getObj3D.
 */
class Callback_Visualization_getObj3D_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Visualization_getObj3D_Base> Callback_Visualization_getObj3DPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Visualization::begin_getPoseObj3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getPoseObj3DData.
 */
class Callback_Visualization_getPoseObj3DData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Visualization_getPoseObj3DData_Base> Callback_Visualization_getPoseObj3DDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Visualization::begin_clearAll.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_clearAll.
 */
class Callback_Visualization_clearAll_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Visualization_clearAll_Base> Callback_Visualization_clearAllPtr;

}

namespace IceProxy
{

namespace jderobot
{

class Visualization : public virtual ::Ice::Proxy<Visualization, ::IceProxy::Ice::Object>
{
public:

    void drawSegment(const ::jderobot::bufferSegments& bseg, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_drawSegment(_iceI_begin_drawSegment(bseg, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_drawSegment(const ::jderobot::bufferSegments& bseg, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_drawSegment(bseg, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_drawSegment(const ::jderobot::bufferSegments& bseg, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_drawSegment(bseg, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_drawSegment(const ::jderobot::bufferSegments& bseg, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_drawSegment(bseg, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_drawSegment(const ::jderobot::bufferSegments& bseg, const ::jderobot::Callback_Visualization_drawSegmentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_drawSegment(bseg, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_drawSegment(const ::jderobot::bufferSegments& bseg, const ::Ice::Context& context, const ::jderobot::Callback_Visualization_drawSegmentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_drawSegment(bseg, context, cb, cookie);
    }

    void end_drawSegment(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_drawSegment(const ::jderobot::bufferSegments&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::bufferSegments getSegment(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getSegment(_iceI_begin_getSegment(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getSegment(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getSegment(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSegment(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSegment(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSegment(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSegment(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSegment(const ::jderobot::Callback_Visualization_getSegmentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSegment(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSegment(const ::Ice::Context& context, const ::jderobot::Callback_Visualization_getSegmentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSegment(context, cb, cookie);
    }

    ::jderobot::bufferSegments end_getSegment(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getSegment(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void drawPoint(const ::jderobot::bufferPoints& bpnts, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_drawPoint(_iceI_begin_drawPoint(bpnts, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_drawPoint(const ::jderobot::bufferPoints& bpnts, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_drawPoint(bpnts, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_drawPoint(const ::jderobot::bufferPoints& bpnts, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_drawPoint(bpnts, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_drawPoint(const ::jderobot::bufferPoints& bpnts, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_drawPoint(bpnts, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_drawPoint(const ::jderobot::bufferPoints& bpnts, const ::jderobot::Callback_Visualization_drawPointPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_drawPoint(bpnts, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_drawPoint(const ::jderobot::bufferPoints& bpnts, const ::Ice::Context& context, const ::jderobot::Callback_Visualization_drawPointPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_drawPoint(bpnts, context, cb, cookie);
    }

    void end_drawPoint(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_drawPoint(const ::jderobot::bufferPoints&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::bufferPoints getPoints(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPoints(_iceI_begin_getPoints(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPoints(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::jderobot::Callback_Visualization_getPointsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& context, const ::jderobot::Callback_Visualization_getPointsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(context, cb, cookie);
    }

    ::jderobot::bufferPoints end_getPoints(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPoints(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::object3d getObj3D(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getObj3D(_iceI_begin_getObj3D(id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getObj3D(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getObj3D(id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObj3D(const ::std::string& id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getObj3D(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getObj3D(const ::std::string& id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getObj3D(id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getObj3D(const ::std::string& id, const ::jderobot::Callback_Visualization_getObj3DPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getObj3D(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getObj3D(const ::std::string& id, const ::Ice::Context& context, const ::jderobot::Callback_Visualization_getObj3DPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getObj3D(id, context, cb, cookie);
    }

    ::jderobot::object3d end_getObj3D(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getObj3D(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::bufferPoseObj3D getPoseObj3DData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPoseObj3DData(_iceI_begin_getPoseObj3DData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPoseObj3DData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPoseObj3DData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoseObj3DData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoseObj3DData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseObj3DData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoseObj3DData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseObj3DData(const ::jderobot::Callback_Visualization_getPoseObj3DDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoseObj3DData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoseObj3DData(const ::Ice::Context& context, const ::jderobot::Callback_Visualization_getPoseObj3DDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoseObj3DData(context, cb, cookie);
    }

    ::jderobot::bufferPoseObj3D end_getPoseObj3DData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPoseObj3DData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void clearAll(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_clearAll(_iceI_begin_clearAll(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_clearAll(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_clearAll(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_clearAll(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_clearAll(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAll(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_clearAll(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAll(const ::jderobot::Callback_Visualization_clearAllPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_clearAll(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_clearAll(const ::Ice::Context& context, const ::jderobot::Callback_Visualization_clearAllPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_clearAll(context, cb, cookie);
    }

    void end_clearAll(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_clearAll(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

/**
 * Interface to the Visualization interaction.
 */
class Visualization : public virtual ::Ice::Object
{
public:

    typedef VisualizationPrx ProxyType;
    typedef VisualizationPtr PointerType;

    virtual ~Visualization();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void drawSegment(const bufferSegments& bseg, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_drawSegment(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bufferSegments getSegment(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getSegment(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void drawPoint(const bufferPoints& bpnts, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_drawPoint(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bufferPoints getPoints(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPoints(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual object3d getObj3D(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getObj3D(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bufferPoseObj3D getPoseObj3DData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPoseObj3DData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void clearAll(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_clearAll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Visualization& lhs, const Visualization& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Visualization& lhs, const Visualization& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::jderobot::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::jderobot::Color, S>
{
    static void write(S* ostr, const ::jderobot::Color& v)
    {
        ostr->write(v.r);
        ostr->write(v.g);
        ostr->write(v.b);
    }
};

template<typename S>
struct StreamReader< ::jderobot::Color, S>
{
    static void read(S* istr, ::jderobot::Color& v)
    {
        istr->read(v.r);
        istr->read(v.g);
        istr->read(v.b);
    }
};

template<>
struct StreamableTraits< ::jderobot::RGBSegment>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::jderobot::RGBSegment, S>
{
    static void write(S* ostr, const ::jderobot::RGBSegment& v)
    {
        ostr->write(v.seg);
        ostr->write(v.c);
    }
};

template<typename S>
struct StreamReader< ::jderobot::RGBSegment, S>
{
    static void read(S* istr, ::jderobot::RGBSegment& v)
    {
        istr->read(v.seg);
        istr->read(v.c);
    }
};

template<>
struct StreamableTraits< ::jderobot::bufferSegments>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::jderobot::bufferSegments, S>
{
    static void write(S* ostr, const ::jderobot::bufferSegments& v)
    {
        ostr->write(v.buffer);
        ostr->write(v.refresh);
    }
};

template<typename S>
struct StreamReader< ::jderobot::bufferSegments, S>
{
    static void read(S* istr, ::jderobot::bufferSegments& v)
    {
        istr->read(v.buffer);
        istr->read(v.refresh);
    }
};

template<>
struct StreamableTraits< ::jderobot::bufferPoints>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::jderobot::bufferPoints, S>
{
    static void write(S* ostr, const ::jderobot::bufferPoints& v)
    {
        ostr->write(v.buffer);
        ostr->write(v.refresh);
    }
};

template<typename S>
struct StreamReader< ::jderobot::bufferPoints, S>
{
    static void read(S* istr, ::jderobot::bufferPoints& v)
    {
        istr->read(v.buffer);
        istr->read(v.refresh);
    }
};

template<>
struct StreamableTraits< ::jderobot::object3d>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::jderobot::object3d, S>
{
    static void write(S* ostr, const ::jderobot::object3d& v)
    {
        ostr->write(v.obj);
        ostr->write(v.id);
        ostr->write(v.format);
    }
};

template<typename S>
struct StreamReader< ::jderobot::object3d, S>
{
    static void read(S* istr, ::jderobot::object3d& v)
    {
        istr->read(v.obj);
        istr->read(v.id);
        istr->read(v.format);
    }
};

template<>
struct StreamableTraits< ::jderobot::PoseObj3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::jderobot::PoseObj3D, S>
{
    static void write(S* ostr, const ::jderobot::PoseObj3D& v)
    {
        ostr->write(v.id);
        ostr->write(v.pos);
    }
};

template<typename S>
struct StreamReader< ::jderobot::PoseObj3D, S>
{
    static void read(S* istr, ::jderobot::PoseObj3D& v)
    {
        istr->read(v.id);
        istr->read(v.pos);
    }
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Visualization::begin_drawSegment.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_drawSegment.
 */
template<class T>
class CallbackNC_Visualization_drawSegment : public Callback_Visualization_drawSegment_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Visualization_drawSegment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawSegment.
 */
template<class T> Callback_Visualization_drawSegmentPtr
newCallback_Visualization_drawSegment(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_drawSegment<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawSegment.
 */
template<class T> Callback_Visualization_drawSegmentPtr
newCallback_Visualization_drawSegment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_drawSegment<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawSegment.
 */
template<class T> Callback_Visualization_drawSegmentPtr
newCallback_Visualization_drawSegment(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_drawSegment<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawSegment.
 */
template<class T> Callback_Visualization_drawSegmentPtr
newCallback_Visualization_drawSegment(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_drawSegment<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Visualization::begin_drawSegment.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_drawSegment.
 */
template<class T, typename CT>
class Callback_Visualization_drawSegment : public Callback_Visualization_drawSegment_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Visualization_drawSegment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawSegment.
 */
template<class T, typename CT> Callback_Visualization_drawSegmentPtr
newCallback_Visualization_drawSegment(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_drawSegment<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawSegment.
 */
template<class T, typename CT> Callback_Visualization_drawSegmentPtr
newCallback_Visualization_drawSegment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_drawSegment<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawSegment.
 */
template<class T, typename CT> Callback_Visualization_drawSegmentPtr
newCallback_Visualization_drawSegment(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_drawSegment<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawSegment.
 */
template<class T, typename CT> Callback_Visualization_drawSegmentPtr
newCallback_Visualization_drawSegment(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_drawSegment<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Visualization::begin_getSegment.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getSegment.
 */
template<class T>
class CallbackNC_Visualization_getSegment : public Callback_Visualization_getSegment_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const bufferSegments&);

    CallbackNC_Visualization_getSegment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualizationPrx proxy = VisualizationPrx::uncheckedCast(result->getProxy());
        bufferSegments ret;
        try
        {
            ret = proxy->end_getSegment(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getSegment.
 */
template<class T> Callback_Visualization_getSegmentPtr
newCallback_Visualization_getSegment(const IceUtil::Handle<T>& instance, void (T::*cb)(const bufferSegments&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_getSegment<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getSegment.
 */
template<class T> Callback_Visualization_getSegmentPtr
newCallback_Visualization_getSegment(T* instance, void (T::*cb)(const bufferSegments&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_getSegment<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Visualization::begin_getSegment.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getSegment.
 */
template<class T, typename CT>
class Callback_Visualization_getSegment : public Callback_Visualization_getSegment_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const bufferSegments&, const CT&);

    Callback_Visualization_getSegment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualizationPrx proxy = VisualizationPrx::uncheckedCast(result->getProxy());
        bufferSegments ret;
        try
        {
            ret = proxy->end_getSegment(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getSegment.
 */
template<class T, typename CT> Callback_Visualization_getSegmentPtr
newCallback_Visualization_getSegment(const IceUtil::Handle<T>& instance, void (T::*cb)(const bufferSegments&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_getSegment<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getSegment.
 */
template<class T, typename CT> Callback_Visualization_getSegmentPtr
newCallback_Visualization_getSegment(T* instance, void (T::*cb)(const bufferSegments&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_getSegment<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Visualization::begin_drawPoint.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_drawPoint.
 */
template<class T>
class CallbackNC_Visualization_drawPoint : public Callback_Visualization_drawPoint_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Visualization_drawPoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawPoint.
 */
template<class T> Callback_Visualization_drawPointPtr
newCallback_Visualization_drawPoint(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_drawPoint<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawPoint.
 */
template<class T> Callback_Visualization_drawPointPtr
newCallback_Visualization_drawPoint(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_drawPoint<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawPoint.
 */
template<class T> Callback_Visualization_drawPointPtr
newCallback_Visualization_drawPoint(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_drawPoint<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawPoint.
 */
template<class T> Callback_Visualization_drawPointPtr
newCallback_Visualization_drawPoint(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_drawPoint<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Visualization::begin_drawPoint.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_drawPoint.
 */
template<class T, typename CT>
class Callback_Visualization_drawPoint : public Callback_Visualization_drawPoint_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Visualization_drawPoint(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawPoint.
 */
template<class T, typename CT> Callback_Visualization_drawPointPtr
newCallback_Visualization_drawPoint(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_drawPoint<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawPoint.
 */
template<class T, typename CT> Callback_Visualization_drawPointPtr
newCallback_Visualization_drawPoint(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_drawPoint<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawPoint.
 */
template<class T, typename CT> Callback_Visualization_drawPointPtr
newCallback_Visualization_drawPoint(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_drawPoint<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_drawPoint.
 */
template<class T, typename CT> Callback_Visualization_drawPointPtr
newCallback_Visualization_drawPoint(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_drawPoint<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Visualization::begin_getPoints.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getPoints.
 */
template<class T>
class CallbackNC_Visualization_getPoints : public Callback_Visualization_getPoints_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const bufferPoints&);

    CallbackNC_Visualization_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualizationPrx proxy = VisualizationPrx::uncheckedCast(result->getProxy());
        bufferPoints ret;
        try
        {
            ret = proxy->end_getPoints(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getPoints.
 */
template<class T> Callback_Visualization_getPointsPtr
newCallback_Visualization_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(const bufferPoints&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_getPoints<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getPoints.
 */
template<class T> Callback_Visualization_getPointsPtr
newCallback_Visualization_getPoints(T* instance, void (T::*cb)(const bufferPoints&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_getPoints<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Visualization::begin_getPoints.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getPoints.
 */
template<class T, typename CT>
class Callback_Visualization_getPoints : public Callback_Visualization_getPoints_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const bufferPoints&, const CT&);

    Callback_Visualization_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualizationPrx proxy = VisualizationPrx::uncheckedCast(result->getProxy());
        bufferPoints ret;
        try
        {
            ret = proxy->end_getPoints(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getPoints.
 */
template<class T, typename CT> Callback_Visualization_getPointsPtr
newCallback_Visualization_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(const bufferPoints&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_getPoints<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getPoints.
 */
template<class T, typename CT> Callback_Visualization_getPointsPtr
newCallback_Visualization_getPoints(T* instance, void (T::*cb)(const bufferPoints&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_getPoints<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Visualization::begin_getObj3D.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getObj3D.
 */
template<class T>
class CallbackNC_Visualization_getObj3D : public Callback_Visualization_getObj3D_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const object3d&);

    CallbackNC_Visualization_getObj3D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualizationPrx proxy = VisualizationPrx::uncheckedCast(result->getProxy());
        object3d ret;
        try
        {
            ret = proxy->end_getObj3D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getObj3D.
 */
template<class T> Callback_Visualization_getObj3DPtr
newCallback_Visualization_getObj3D(const IceUtil::Handle<T>& instance, void (T::*cb)(const object3d&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_getObj3D<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getObj3D.
 */
template<class T> Callback_Visualization_getObj3DPtr
newCallback_Visualization_getObj3D(T* instance, void (T::*cb)(const object3d&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_getObj3D<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Visualization::begin_getObj3D.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getObj3D.
 */
template<class T, typename CT>
class Callback_Visualization_getObj3D : public Callback_Visualization_getObj3D_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const object3d&, const CT&);

    Callback_Visualization_getObj3D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualizationPrx proxy = VisualizationPrx::uncheckedCast(result->getProxy());
        object3d ret;
        try
        {
            ret = proxy->end_getObj3D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getObj3D.
 */
template<class T, typename CT> Callback_Visualization_getObj3DPtr
newCallback_Visualization_getObj3D(const IceUtil::Handle<T>& instance, void (T::*cb)(const object3d&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_getObj3D<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getObj3D.
 */
template<class T, typename CT> Callback_Visualization_getObj3DPtr
newCallback_Visualization_getObj3D(T* instance, void (T::*cb)(const object3d&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_getObj3D<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Visualization::begin_getPoseObj3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getPoseObj3DData.
 */
template<class T>
class CallbackNC_Visualization_getPoseObj3DData : public Callback_Visualization_getPoseObj3DData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const bufferPoseObj3D&);

    CallbackNC_Visualization_getPoseObj3DData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualizationPrx proxy = VisualizationPrx::uncheckedCast(result->getProxy());
        bufferPoseObj3D ret;
        try
        {
            ret = proxy->end_getPoseObj3DData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getPoseObj3DData.
 */
template<class T> Callback_Visualization_getPoseObj3DDataPtr
newCallback_Visualization_getPoseObj3DData(const IceUtil::Handle<T>& instance, void (T::*cb)(const bufferPoseObj3D&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_getPoseObj3DData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getPoseObj3DData.
 */
template<class T> Callback_Visualization_getPoseObj3DDataPtr
newCallback_Visualization_getPoseObj3DData(T* instance, void (T::*cb)(const bufferPoseObj3D&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_getPoseObj3DData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Visualization::begin_getPoseObj3DData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_getPoseObj3DData.
 */
template<class T, typename CT>
class Callback_Visualization_getPoseObj3DData : public Callback_Visualization_getPoseObj3DData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const bufferPoseObj3D&, const CT&);

    Callback_Visualization_getPoseObj3DData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        VisualizationPrx proxy = VisualizationPrx::uncheckedCast(result->getProxy());
        bufferPoseObj3D ret;
        try
        {
            ret = proxy->end_getPoseObj3DData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getPoseObj3DData.
 */
template<class T, typename CT> Callback_Visualization_getPoseObj3DDataPtr
newCallback_Visualization_getPoseObj3DData(const IceUtil::Handle<T>& instance, void (T::*cb)(const bufferPoseObj3D&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_getPoseObj3DData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_getPoseObj3DData.
 */
template<class T, typename CT> Callback_Visualization_getPoseObj3DDataPtr
newCallback_Visualization_getPoseObj3DData(T* instance, void (T::*cb)(const bufferPoseObj3D&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_getPoseObj3DData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Visualization::begin_clearAll.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_clearAll.
 */
template<class T>
class CallbackNC_Visualization_clearAll : public Callback_Visualization_clearAll_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Visualization_clearAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_clearAll.
 */
template<class T> Callback_Visualization_clearAllPtr
newCallback_Visualization_clearAll(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_clearAll<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_clearAll.
 */
template<class T> Callback_Visualization_clearAllPtr
newCallback_Visualization_clearAll(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_clearAll<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_clearAll.
 */
template<class T> Callback_Visualization_clearAllPtr
newCallback_Visualization_clearAll(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_clearAll<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_clearAll.
 */
template<class T> Callback_Visualization_clearAllPtr
newCallback_Visualization_clearAll(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Visualization_clearAll<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Visualization::begin_clearAll.
 * Create a wrapper instance by calling ::jderobot::newCallback_Visualization_clearAll.
 */
template<class T, typename CT>
class Callback_Visualization_clearAll : public Callback_Visualization_clearAll_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Visualization_clearAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_clearAll.
 */
template<class T, typename CT> Callback_Visualization_clearAllPtr
newCallback_Visualization_clearAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_clearAll<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_clearAll.
 */
template<class T, typename CT> Callback_Visualization_clearAllPtr
newCallback_Visualization_clearAll(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_clearAll<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_clearAll.
 */
template<class T, typename CT> Callback_Visualization_clearAllPtr
newCallback_Visualization_clearAll(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_clearAll<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Visualization::begin_clearAll.
 */
template<class T, typename CT> Callback_Visualization_clearAllPtr
newCallback_Visualization_clearAll(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Visualization_clearAll<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
