//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `image.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_image_h__
#define __jderobot_image_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class ImageDescription;
class ImageData;
class ImageConsumer;
class ImageConsumerPrx;
class ImageProvider;
class ImageProviderPrx;

}

namespace jderobot
{

using ImageFormat = ::std::vector<::std::string>;

}

namespace jderobot
{

class ImageConsumer : public virtual ::Ice::Object
{
public:

    using ProxyType = ImageConsumerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void report(::std::shared_ptr<ImageData> obj, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_report(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

/**
 * Interface to the image provider.
 */
class ImageProvider : public virtual ::Ice::Object
{
public:

    using ProxyType = ImageProviderPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Returns the image source description.
     * @param current The Current object for the invocation.
     */
    virtual ::std::shared_ptr<ImageDescription> getImageDescription(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getImageDescription(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ImageFormat getImageFormat(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getImageFormat(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Returns the latest data.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     */
    virtual void getImageDataAsync(::std::string format, ::std::function<void(const ::std::shared_ptr<ImageData>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getImageData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

/**
 * Static description of the image source.
 */
class ImageDescription : public ::Ice::ValueHelper<ImageDescription, ::Ice::Value>
{
public:

    virtual ~ImageDescription();

    ImageDescription() = default;

    ImageDescription(const ImageDescription&) = default;
    ImageDescription(ImageDescription&&) = default;
    ImageDescription& operator=(const ImageDescription&) = default;
    ImageDescription& operator=(ImageDescription&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param width < %Image width [pixels]
     * @param height < %Image height [pixels]
     * @param size < %Image size [bytes]
     * @param format < %Image format string
     */
    ImageDescription(int width, int height, int size, const ::std::string& format, const ::std::string& md5sum) :
        width(width),
        height(height),
        size(size),
        format(::std::move(format)),
        md5sum(::std::move(md5sum))
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(width, height, size, format, md5sum);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * < %Image width [pixels]
     */
    int width;
    /**
     * < %Image height [pixels]
     */
    int height;
    /**
     * < %Image size [bytes]
     */
    int size;
    /**
     * < %Image format string
     */
    ::std::string format;
    ::std::string md5sum;
};

/// \cond INTERNAL
static ImageDescription _iceS_ImageDescription_init;
/// \endcond

/**
 * A single image served as a sequence of bytes
 */
class ImageData : public ::Ice::ValueHelper<ImageData, ::Ice::Value>
{
public:

    virtual ~ImageData();

    ImageData() = default;

    ImageData(const ImageData&) = default;
    ImageData(ImageData&&) = default;
    ImageData& operator=(const ImageData&) = default;
    ImageData& operator=(ImageData&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param timeStamp < TimeStamp of Data
     * @param description < ImageDescription of Data, for convienence purposes
     * @param pixelData < The image data itself.
     */
    ImageData(const ::jderobot::Time& timeStamp, const ::std::shared_ptr<::jderobot::ImageDescription>& description, const ::jderobot::ByteSeq& pixelData) :
        timeStamp(::std::move(timeStamp)),
        description(::std::move(description)),
        pixelData(::std::move(pixelData))
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::jderobot::Time&, const ::std::shared_ptr<::jderobot::ImageDescription>&, const ::jderobot::ByteSeq&> ice_tuple() const
    {
        return std::tie(timeStamp, description, pixelData);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * < TimeStamp of Data
     */
    ::jderobot::Time timeStamp;
    /**
     * < ImageDescription of Data, for convienence purposes
     */
    ::std::shared_ptr<::jderobot::ImageDescription> description;
    /**
     * < The image data itself. The structure of this byte sequence depends on the image format and compression.
     */
    ::jderobot::ByteSeq pixelData;
};

}

namespace jderobot
{

class ImageConsumerPrx : public virtual ::Ice::Proxy<ImageConsumerPrx, ::Ice::ObjectPrx>
{
public:

    void report(const ::std::shared_ptr<ImageData>& obj, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ImageConsumerPrx::_iceI_report, obj, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto reportAsync(const ::std::shared_ptr<ImageData>& obj, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ImageConsumerPrx::_iceI_report, obj, context);
    }

    ::std::function<void()>
    reportAsync(const ::std::shared_ptr<ImageData>& obj,
                ::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ImageConsumerPrx::_iceI_report, obj, context);
    }

    /// \cond INTERNAL
    void _iceI_report(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ImageData>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ImageConsumerPrx() = default;
    friend ::std::shared_ptr<ImageConsumerPrx> IceInternal::createProxy<ImageConsumerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

/**
 * Interface to the image provider.
 */
class ImageProviderPrx : public virtual ::Ice::Proxy<ImageProviderPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Returns the image source description.
     * @param context The Context map to send with the invocation.
     */
    ::std::shared_ptr<ImageDescription> getImageDescription(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::ImageDescription>>(true, this, &ImageProviderPrx::_iceI_getImageDescription, context).get();
    }

    /**
     * Returns the image source description.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    template<template<typename> class P = ::std::promise>
    auto getImageDescriptionAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::ImageDescription>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::ImageDescription>, P>(false, this, &ImageProviderPrx::_iceI_getImageDescription, context);
    }

    /**
     * Returns the image source description.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getImageDescriptionAsync(::std::function<void(::std::shared_ptr<::jderobot::ImageDescription>)> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::ImageDescription>>(response, ex, sent, this, &jderobot::ImageProviderPrx::_iceI_getImageDescription, context);
    }

    /// \cond INTERNAL
    void _iceI_getImageDescription(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::ImageDescription>>>&, const ::Ice::Context&);
    /// \endcond

    ImageFormat getImageFormat(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::jderobot::ImageFormat>(true, this, &ImageProviderPrx::_iceI_getImageFormat, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getImageFormatAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::jderobot::ImageFormat>>().get_future())
    {
        return _makePromiseOutgoing<::jderobot::ImageFormat, P>(false, this, &ImageProviderPrx::_iceI_getImageFormat, context);
    }

    ::std::function<void()>
    getImageFormatAsync(::std::function<void(::jderobot::ImageFormat)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::jderobot::ImageFormat>(response, ex, sent, this, &jderobot::ImageProviderPrx::_iceI_getImageFormat, context);
    }

    /// \cond INTERNAL
    void _iceI_getImageFormat(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::jderobot::ImageFormat>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Returns the latest data.
     * @param context The Context map to send with the invocation.
     */
    ::std::shared_ptr<ImageData> getImageData(const ::std::string& format, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::ImageData>>(true, this, &ImageProviderPrx::_iceI_getImageData, format, context).get();
    }

    /**
     * Returns the latest data.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    template<template<typename> class P = ::std::promise>
    auto getImageDataAsync(const ::std::string& format, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::ImageData>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::ImageData>, P>(false, this, &ImageProviderPrx::_iceI_getImageData, format, context);
    }

    /**
     * Returns the latest data.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getImageDataAsync(const ::std::string& format,
                      ::std::function<void(::std::shared_ptr<::jderobot::ImageData>)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::ImageData>>(response, ex, sent, this, &jderobot::ImageProviderPrx::_iceI_getImageData, format, context);
    }

    /// \cond INTERNAL
    void _iceI_getImageData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::ImageData>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ImageProviderPrx() = default;
    friend ::std::shared_ptr<ImageProviderPrx> IceInternal::createProxy<ImageProviderPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::jderobot::ImageDescription, S>
{
    static void read(S* istr, ::jderobot::ImageDescription& v)
    {
        istr->readAll(v.width, v.height, v.size, v.format, v.md5sum);
    }
};

template<typename S>
struct StreamReader<::jderobot::ImageData, S>
{
    static void read(S* istr, ::jderobot::ImageData& v)
    {
        istr->readAll(v.timeStamp, v.description, v.pixelData);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using ImageDescriptionPtr = ::std::shared_ptr<ImageDescription>;

using ImageDataPtr = ::std::shared_ptr<ImageData>;

using ImageConsumerPtr = ::std::shared_ptr<ImageConsumer>;
using ImageConsumerPrxPtr = ::std::shared_ptr<ImageConsumerPrx>;

using ImageProviderPtr = ::std::shared_ptr<ImageProvider>;
using ImageProviderPrxPtr = ::std::shared_ptr<ImageProviderPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class ImageDescription;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ImageDescription>&);
::IceProxy::Ice::Object* upCast(ImageDescription*);
/// \endcond

class ImageData;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ImageData>&);
::IceProxy::Ice::Object* upCast(ImageData*);
/// \endcond

class ImageConsumer;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ImageConsumer>&);
::IceProxy::Ice::Object* upCast(ImageConsumer*);
/// \endcond

class ImageProvider;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ImageProvider>&);
::IceProxy::Ice::Object* upCast(ImageProvider*);
/// \endcond

}

}

namespace jderobot
{

class ImageDescription;
/// \cond INTERNAL
::Ice::Object* upCast(ImageDescription*);
/// \endcond
typedef ::IceInternal::Handle< ImageDescription> ImageDescriptionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageDescription> ImageDescriptionPrx;
typedef ImageDescriptionPrx ImageDescriptionPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ImageDescriptionPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ImageData;
/// \cond INTERNAL
::Ice::Object* upCast(ImageData*);
/// \endcond
typedef ::IceInternal::Handle< ImageData> ImageDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageData> ImageDataPrx;
typedef ImageDataPrx ImageDataPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ImageDataPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ImageConsumer;
/// \cond INTERNAL
::Ice::Object* upCast(ImageConsumer*);
/// \endcond
typedef ::IceInternal::Handle< ImageConsumer> ImageConsumerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageConsumer> ImageConsumerPrx;
typedef ImageConsumerPrx ImageConsumerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ImageConsumerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ImageProvider;
/// \cond INTERNAL
::Ice::Object* upCast(ImageProvider*);
/// \endcond
typedef ::IceInternal::Handle< ImageProvider> ImageProviderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ImageProvider> ImageProviderPrx;
typedef ImageProviderPrx ImageProviderPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ImageProviderPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

typedef ::std::vector< ::std::string> ImageFormat;

}

namespace jderobot
{

/**
 * AMD callback class for jderobot::ImageProvider::getImageData_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_ImageProvider_getImageData : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_ImageProvider_getImageData();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const ImageDataPtr& result) = 0;
};

typedef ::IceUtil::Handle< ::jderobot::AMD_ImageProvider_getImageData> AMD_ImageProvider_getImageDataPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace jderobot
{

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_ImageProvider_getImageData : public ::jderobot::AMD_ImageProvider_getImageData, public ::IceInternal::IncomingAsync
{
public:

    AMD_ImageProvider_getImageData(::IceInternal::Incoming&);

    virtual void ice_response(const ::jderobot::ImageDataPtr&);
};

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

}

}
/// \endcond

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ImageConsumer::begin_report.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageConsumer_report.
 */
class Callback_ImageConsumer_report_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageConsumer_report_Base> Callback_ImageConsumer_reportPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageDescription.
 */
class Callback_ImageProvider_getImageDescription_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageProvider_getImageDescription_Base> Callback_ImageProvider_getImageDescriptionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageFormat.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageFormat.
 */
class Callback_ImageProvider_getImageFormat_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageProvider_getImageFormat_Base> Callback_ImageProvider_getImageFormatPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageData.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageData.
 */
class Callback_ImageProvider_getImageData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ImageProvider_getImageData_Base> Callback_ImageProvider_getImageDataPtr;

}

namespace IceProxy
{

namespace jderobot
{

class ImageDescription : public virtual ::Ice::Proxy<ImageDescription, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ImageData : public virtual ::Ice::Proxy<ImageData, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ImageConsumer : public virtual ::Ice::Proxy<ImageConsumer, ::IceProxy::Ice::Object>
{
public:

    void report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_report(_iceI_begin_report(obj, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_report(obj, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_report(obj, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_report(obj, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::jderobot::Callback_ImageConsumer_reportPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_report(obj, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_report(const ::jderobot::ImageDataPtr& obj, const ::Ice::Context& context, const ::jderobot::Callback_ImageConsumer_reportPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_report(obj, context, cb, cookie);
    }

    void end_report(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_report(const ::jderobot::ImageDataPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ImageProvider : public virtual ::Ice::Proxy<ImageProvider, ::IceProxy::Ice::Object>
{
public:

    /**
     * Returns the image source description.
     * @param context The Context map to send with the invocation.
     */
    ::jderobot::ImageDescriptionPtr getImageDescription(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getImageDescription(_iceI_begin_getImageDescription(context, ::IceInternal::dummyCallback, 0, true));
    }

    /**
     * Returns the image source description.
     * @param context The Context map to send with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImageDescription(context, ::IceInternal::dummyCallback, 0);
    }

    /**
     * Returns the image source description.
     * @param cb Asynchronous callback object.
     * @param cookie User-defined data to associate with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageDescription(::Ice::noExplicitContext, cb, cookie);
    }

    /**
     * Returns the image source description.
     * @param context The Context map to send with the invocation.
     * @param cb Asynchronous callback object.
     * @param cookie User-defined data to associate with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageDescription(context, cb, cookie);
    }

    /**
     * Returns the image source description.
     * @param cb Asynchronous callback object.
     * @param cookie User-defined data to associate with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageDescription(const ::jderobot::Callback_ImageProvider_getImageDescriptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageDescription(::Ice::noExplicitContext, cb, cookie);
    }

    /**
     * Returns the image source description.
     * @param context The Context map to send with the invocation.
     * @param cb Asynchronous callback object.
     * @param cookie User-defined data to associate with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageDescription(const ::Ice::Context& context, const ::jderobot::Callback_ImageProvider_getImageDescriptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageDescription(context, cb, cookie);
    }

    /**
     * Completes an invocation of begin_getImageDescription.
     * @param result The asynchronous result object for the invocation.
     */
    ::jderobot::ImageDescriptionPtr end_getImageDescription(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImageDescription(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::ImageFormat getImageFormat(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getImageFormat(_iceI_begin_getImageFormat(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImageFormat(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageFormat(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageFormat(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::jderobot::Callback_ImageProvider_getImageFormatPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageFormat(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageFormat(const ::Ice::Context& context, const ::jderobot::Callback_ImageProvider_getImageFormatPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageFormat(context, cb, cookie);
    }

    ::jderobot::ImageFormat end_getImageFormat(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImageFormat(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Returns the latest data.
     * @param context The Context map to send with the invocation.
     */
    ::jderobot::ImageDataPtr getImageData(const ::std::string& format, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getImageData(_iceI_begin_getImageData(format, context, ::IceInternal::dummyCallback, 0, true));
    }

    /**
     * Returns the latest data.
     * @param context The Context map to send with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImageData(format, context, ::IceInternal::dummyCallback, 0);
    }

    /**
     * Returns the latest data.
     * @param cb Asynchronous callback object.
     * @param cookie User-defined data to associate with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageData(format, ::Ice::noExplicitContext, cb, cookie);
    }

    /**
     * Returns the latest data.
     * @param context The Context map to send with the invocation.
     * @param cb Asynchronous callback object.
     * @param cookie User-defined data to associate with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageData(format, context, cb, cookie);
    }

    /**
     * Returns the latest data.
     * @param cb Asynchronous callback object.
     * @param cookie User-defined data to associate with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::jderobot::Callback_ImageProvider_getImageDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageData(format, ::Ice::noExplicitContext, cb, cookie);
    }

    /**
     * Returns the latest data.
     * @param context The Context map to send with the invocation.
     * @param cb Asynchronous callback object.
     * @param cookie User-defined data to associate with the invocation.
     * @return The asynchronous result object for the invocation.
     */
    ::Ice::AsyncResultPtr begin_getImageData(const ::std::string& format, const ::Ice::Context& context, const ::jderobot::Callback_ImageProvider_getImageDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImageData(format, context, cb, cookie);
    }

    /**
     * Completes an invocation of begin_getImageData.
     * @param result The asynchronous result object for the invocation.
     */
    ::jderobot::ImageDataPtr end_getImageData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImageData(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

/**
 * Static description of the image source.
 */
class ImageDescription : public virtual ::Ice::Object
{
public:

    typedef ImageDescriptionPrx ProxyType;
    typedef ImageDescriptionPtr PointerType;

    virtual ~ImageDescription();

    ImageDescription()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     * @param width < %Image width [pixels]
     * @param height < %Image height [pixels]
     * @param size < %Image size [bytes]
     * @param format < %Image format string
     */
    ImageDescription(::Ice::Int width, ::Ice::Int height, ::Ice::Int size, const ::std::string& format, const ::std::string& md5sum) :
        width(width),
        height(height),
        size(size),
        format(format),
        md5sum(md5sum)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    /**
     * < %Image width [pixels]
     */
    ::Ice::Int width;
    /**
     * < %Image height [pixels]
     */
    ::Ice::Int height;
    /**
     * < %Image size [bytes]
     */
    ::Ice::Int size;
    /**
     * < %Image format string
     */
    ::std::string format;
    ::std::string md5sum;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_ImageDescription_init = ::jderobot::ImageDescription::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const ImageDescription& lhs, const ImageDescription& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ImageDescription& lhs, const ImageDescription& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

/**
 * A single image served as a sequence of bytes
 */
class ImageData : public virtual ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef ImageDataPrx ProxyType;
    typedef ImageDataPtr PointerType;

    virtual ~ImageData();

    ImageData()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     * @param timeStamp < TimeStamp of Data
     * @param description < ImageDescription of Data, for convienence purposes
     * @param pixelData < The image data itself.
     */
    ImageData(const ::jderobot::Time& timeStamp, const ::jderobot::ImageDescriptionPtr& description, const ::jderobot::ByteSeq& pixelData) :
        timeStamp(timeStamp),
        description(description),
        pixelData(pixelData)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    /**
     * < TimeStamp of Data
     */
    ::jderobot::Time timeStamp;
    /**
     * < ImageDescription of Data, for convienence purposes
     */
    ::jderobot::ImageDescriptionPtr description;
    /**
     * < The image data itself. The structure of this byte sequence depends on the image format and compression.
     */
    ::jderobot::ByteSeq pixelData;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_ImageData_init = ::jderobot::ImageData::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const ImageData& lhs, const ImageData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ImageData& lhs, const ImageData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class ImageConsumer : public virtual ::Ice::Object
{
public:

    typedef ImageConsumerPrx ProxyType;
    typedef ImageConsumerPtr PointerType;

    virtual ~ImageConsumer();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void report(const ImageDataPtr& obj, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_report(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ImageConsumer& lhs, const ImageConsumer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ImageConsumer& lhs, const ImageConsumer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

/**
 * Interface to the image provider.
 */
class ImageProvider : public virtual ::Ice::Object
{
public:

    typedef ImageProviderPrx ProxyType;
    typedef ImageProviderPtr PointerType;

    virtual ~ImageProvider();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Returns the image source description.
     * @param current The Current object for the invocation.
     */
    virtual ImageDescriptionPtr getImageDescription(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getImageDescription(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ImageFormat getImageFormat(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getImageFormat(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Returns the latest data.
     * @param cb The AMD callback object for the invocation.
     * @param current The Current object for the invocation.
     */
    virtual void getImageData_async(const ::jderobot::AMD_ImageProvider_getImageDataPtr& cb, const ::std::string& format, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getImageData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ImageProvider& lhs, const ImageProvider& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ImageProvider& lhs, const ImageProvider& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::jderobot::ImageDescription, S>
{
    static void write(S* ostr, const ::jderobot::ImageDescription& v)
    {
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.size);
        ostr->write(v.format);
        ostr->write(v.md5sum);
    }
};

template<typename S>
struct StreamReader< ::jderobot::ImageDescription, S>
{
    static void read(S* istr, ::jderobot::ImageDescription& v)
    {
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.size);
        istr->read(v.format);
        istr->read(v.md5sum);
    }
};

template<typename S>
struct StreamWriter< ::jderobot::ImageData, S>
{
    static void write(S* ostr, const ::jderobot::ImageData& v)
    {
        ostr->write(v.timeStamp);
        ostr->write(v.description);
        ostr->write(v.pixelData);
    }
};

template<typename S>
struct StreamReader< ::jderobot::ImageData, S>
{
    static void read(S* istr, ::jderobot::ImageData& v)
    {
        istr->read(v.timeStamp);
        istr->read(v.description);
        istr->read(v.pixelData);
    }
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ImageConsumer::begin_report.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageConsumer_report.
 */
template<class T>
class CallbackNC_ImageConsumer_report : public Callback_ImageConsumer_report_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ImageConsumer_report(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageConsumer::begin_report.
 */
template<class T> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageConsumer_report<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageConsumer::begin_report.
 */
template<class T> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageConsumer_report<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageConsumer::begin_report.
 */
template<class T> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageConsumer_report<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageConsumer::begin_report.
 */
template<class T> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageConsumer_report<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ImageConsumer::begin_report.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageConsumer_report.
 */
template<class T, typename CT>
class Callback_ImageConsumer_report : public Callback_ImageConsumer_report_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ImageConsumer_report(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageConsumer::begin_report.
 */
template<class T, typename CT> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageConsumer_report<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageConsumer::begin_report.
 */
template<class T, typename CT> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageConsumer_report<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageConsumer::begin_report.
 */
template<class T, typename CT> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageConsumer_report<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageConsumer::begin_report.
 */
template<class T, typename CT> Callback_ImageConsumer_reportPtr
newCallback_ImageConsumer_report(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageConsumer_report<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageDescription.
 */
template<class T>
class CallbackNC_ImageProvider_getImageDescription : public Callback_ImageProvider_getImageDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ImageDescriptionPtr&);

    CallbackNC_ImageProvider_getImageDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ImageProviderPrx proxy = ImageProviderPrx::uncheckedCast(result->getProxy());
        ImageDescriptionPtr ret;
        try
        {
            ret = proxy->end_getImageDescription(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageDescription.
 */
template<class T> Callback_ImageProvider_getImageDescriptionPtr
newCallback_ImageProvider_getImageDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageDescriptionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageDescription<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageDescription.
 */
template<class T> Callback_ImageProvider_getImageDescriptionPtr
newCallback_ImageProvider_getImageDescription(T* instance, void (T::*cb)(const ImageDescriptionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageDescription<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageDescription.
 */
template<class T, typename CT>
class Callback_ImageProvider_getImageDescription : public Callback_ImageProvider_getImageDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ImageDescriptionPtr&, const CT&);

    Callback_ImageProvider_getImageDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ImageProviderPrx proxy = ImageProviderPrx::uncheckedCast(result->getProxy());
        ImageDescriptionPtr ret;
        try
        {
            ret = proxy->end_getImageDescription(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageDescription.
 */
template<class T, typename CT> Callback_ImageProvider_getImageDescriptionPtr
newCallback_ImageProvider_getImageDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageDescriptionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageDescription<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageDescription.
 */
template<class T, typename CT> Callback_ImageProvider_getImageDescriptionPtr
newCallback_ImageProvider_getImageDescription(T* instance, void (T::*cb)(const ImageDescriptionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageDescription<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageFormat.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageFormat.
 */
template<class T>
class CallbackNC_ImageProvider_getImageFormat : public Callback_ImageProvider_getImageFormat_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ImageFormat&);

    CallbackNC_ImageProvider_getImageFormat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ImageProviderPrx proxy = ImageProviderPrx::uncheckedCast(result->getProxy());
        ImageFormat ret;
        try
        {
            ret = proxy->end_getImageFormat(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageFormat.
 */
template<class T> Callback_ImageProvider_getImageFormatPtr
newCallback_ImageProvider_getImageFormat(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageFormat&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageFormat<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageFormat.
 */
template<class T> Callback_ImageProvider_getImageFormatPtr
newCallback_ImageProvider_getImageFormat(T* instance, void (T::*cb)(const ImageFormat&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageFormat<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageFormat.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageFormat.
 */
template<class T, typename CT>
class Callback_ImageProvider_getImageFormat : public Callback_ImageProvider_getImageFormat_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ImageFormat&, const CT&);

    Callback_ImageProvider_getImageFormat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ImageProviderPrx proxy = ImageProviderPrx::uncheckedCast(result->getProxy());
        ImageFormat ret;
        try
        {
            ret = proxy->end_getImageFormat(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageFormat.
 */
template<class T, typename CT> Callback_ImageProvider_getImageFormatPtr
newCallback_ImageProvider_getImageFormat(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageFormat&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageFormat<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageFormat.
 */
template<class T, typename CT> Callback_ImageProvider_getImageFormatPtr
newCallback_ImageProvider_getImageFormat(T* instance, void (T::*cb)(const ImageFormat&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageFormat<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageData.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageData.
 */
template<class T>
class CallbackNC_ImageProvider_getImageData : public Callback_ImageProvider_getImageData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ImageDataPtr&);

    CallbackNC_ImageProvider_getImageData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ImageProviderPrx proxy = ImageProviderPrx::uncheckedCast(result->getProxy());
        ImageDataPtr ret;
        try
        {
            ret = proxy->end_getImageData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageData.
 */
template<class T> Callback_ImageProvider_getImageDataPtr
newCallback_ImageProvider_getImageData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageData.
 */
template<class T> Callback_ImageProvider_getImageDataPtr
newCallback_ImageProvider_getImageData(T* instance, void (T::*cb)(const ImageDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ImageProvider_getImageData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ImageProvider::begin_getImageData.
 * Create a wrapper instance by calling ::jderobot::newCallback_ImageProvider_getImageData.
 */
template<class T, typename CT>
class Callback_ImageProvider_getImageData : public Callback_ImageProvider_getImageData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ImageDataPtr&, const CT&);

    Callback_ImageProvider_getImageData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ImageProviderPrx proxy = ImageProviderPrx::uncheckedCast(result->getProxy());
        ImageDataPtr ret;
        try
        {
            ret = proxy->end_getImageData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageData.
 */
template<class T, typename CT> Callback_ImageProvider_getImageDataPtr
newCallback_ImageProvider_getImageData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ImageDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ImageProvider::begin_getImageData.
 */
template<class T, typename CT> Callback_ImageProvider_getImageDataPtr
newCallback_ImageProvider_getImageData(T* instance, void (T::*cb)(const ImageDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ImageProvider_getImageData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
