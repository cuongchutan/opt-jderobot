//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `ardroneextra.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_ardroneextra_h__
#define __jderobot_ardroneextra_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class ArDroneExtra;
class ArDroneExtraPrx;

}

namespace jderobot
{

class ArDroneExtra : public virtual ::Ice::Object
{
public:

    using ProxyType = ArDroneExtraPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void toggleCam(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_toggleCam(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void land(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_land(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void takeoff(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_takeoff(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void reset(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_reset(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void recordOnUsb(bool record, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_recordOnUsb(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void ledAnimation(int type, float duration, float req, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ledAnimation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void flightAnimation(int type, float duration, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_flightAnimation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void flatTrim(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_flatTrim(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

class ArDroneExtraPrx : public virtual ::Ice::Proxy<ArDroneExtraPrx, ::Ice::ObjectPrx>
{
public:

    void toggleCam(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ArDroneExtraPrx::_iceI_toggleCam, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto toggleCamAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ArDroneExtraPrx::_iceI_toggleCam, context);
    }

    ::std::function<void()>
    toggleCamAsync(::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ArDroneExtraPrx::_iceI_toggleCam, context);
    }

    /// \cond INTERNAL
    void _iceI_toggleCam(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void land(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ArDroneExtraPrx::_iceI_land, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto landAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ArDroneExtraPrx::_iceI_land, context);
    }

    ::std::function<void()>
    landAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ArDroneExtraPrx::_iceI_land, context);
    }

    /// \cond INTERNAL
    void _iceI_land(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void takeoff(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ArDroneExtraPrx::_iceI_takeoff, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto takeoffAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ArDroneExtraPrx::_iceI_takeoff, context);
    }

    ::std::function<void()>
    takeoffAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ArDroneExtraPrx::_iceI_takeoff, context);
    }

    /// \cond INTERNAL
    void _iceI_takeoff(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ArDroneExtraPrx::_iceI_reset, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resetAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ArDroneExtraPrx::_iceI_reset, context);
    }

    ::std::function<void()>
    resetAsync(::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ArDroneExtraPrx::_iceI_reset, context);
    }

    /// \cond INTERNAL
    void _iceI_reset(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void recordOnUsb(bool record, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ArDroneExtraPrx::_iceI_recordOnUsb, record, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto recordOnUsbAsync(bool record, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ArDroneExtraPrx::_iceI_recordOnUsb, record, context);
    }

    ::std::function<void()>
    recordOnUsbAsync(bool record,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ArDroneExtraPrx::_iceI_recordOnUsb, record, context);
    }

    /// \cond INTERNAL
    void _iceI_recordOnUsb(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, bool, const ::Ice::Context&);
    /// \endcond

    void ledAnimation(int type, float duration, float req, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ArDroneExtraPrx::_iceI_ledAnimation, type, duration, req, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto ledAnimationAsync(int type, float duration, float req, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ArDroneExtraPrx::_iceI_ledAnimation, type, duration, req, context);
    }

    ::std::function<void()>
    ledAnimationAsync(int type, float duration, float req,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ArDroneExtraPrx::_iceI_ledAnimation, type, duration, req, context);
    }

    /// \cond INTERNAL
    void _iceI_ledAnimation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, float, float, const ::Ice::Context&);
    /// \endcond

    void flightAnimation(int type, float duration, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ArDroneExtraPrx::_iceI_flightAnimation, type, duration, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto flightAnimationAsync(int type, float duration, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ArDroneExtraPrx::_iceI_flightAnimation, type, duration, context);
    }

    ::std::function<void()>
    flightAnimationAsync(int type, float duration,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ArDroneExtraPrx::_iceI_flightAnimation, type, duration, context);
    }

    /// \cond INTERNAL
    void _iceI_flightAnimation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, float, const ::Ice::Context&);
    /// \endcond

    void flatTrim(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ArDroneExtraPrx::_iceI_flatTrim, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto flatTrimAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ArDroneExtraPrx::_iceI_flatTrim, context);
    }

    ::std::function<void()>
    flatTrimAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::ArDroneExtraPrx::_iceI_flatTrim, context);
    }

    /// \cond INTERNAL
    void _iceI_flatTrim(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ArDroneExtraPrx() = default;
    friend ::std::shared_ptr<ArDroneExtraPrx> IceInternal::createProxy<ArDroneExtraPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using ArDroneExtraPtr = ::std::shared_ptr<ArDroneExtra>;
using ArDroneExtraPrxPtr = ::std::shared_ptr<ArDroneExtraPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class ArDroneExtra;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ArDroneExtra>&);
::IceProxy::Ice::Object* upCast(ArDroneExtra*);
/// \endcond

}

}

namespace jderobot
{

class ArDroneExtra;
/// \cond INTERNAL
::Ice::Object* upCast(ArDroneExtra*);
/// \endcond
typedef ::IceInternal::Handle< ArDroneExtra> ArDroneExtraPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ArDroneExtra> ArDroneExtraPrx;
typedef ArDroneExtraPrx ArDroneExtraPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ArDroneExtraPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_toggleCam.
 */
class Callback_ArDroneExtra_toggleCam_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_toggleCam_Base> Callback_ArDroneExtra_toggleCamPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_land.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_land.
 */
class Callback_ArDroneExtra_land_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_land_Base> Callback_ArDroneExtra_landPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_takeoff.
 */
class Callback_ArDroneExtra_takeoff_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_takeoff_Base> Callback_ArDroneExtra_takeoffPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_reset.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_reset.
 */
class Callback_ArDroneExtra_reset_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_reset_Base> Callback_ArDroneExtra_resetPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_recordOnUsb.
 */
class Callback_ArDroneExtra_recordOnUsb_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_recordOnUsb_Base> Callback_ArDroneExtra_recordOnUsbPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_ledAnimation.
 */
class Callback_ArDroneExtra_ledAnimation_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_ledAnimation_Base> Callback_ArDroneExtra_ledAnimationPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_flightAnimation.
 */
class Callback_ArDroneExtra_flightAnimation_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_flightAnimation_Base> Callback_ArDroneExtra_flightAnimationPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_flatTrim.
 */
class Callback_ArDroneExtra_flatTrim_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_flatTrim_Base> Callback_ArDroneExtra_flatTrimPtr;

}

namespace IceProxy
{

namespace jderobot
{

class ArDroneExtra : public virtual ::Ice::Proxy<ArDroneExtra, ::IceProxy::Ice::Object>
{
public:

    void toggleCam(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_toggleCam(_iceI_begin_toggleCam(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_toggleCam(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_toggleCam(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_toggleCam(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::jderobot::Callback_ArDroneExtra_toggleCamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_toggleCam(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& context, const ::jderobot::Callback_ArDroneExtra_toggleCamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_toggleCam(context, cb, cookie);
    }

    void end_toggleCam(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_toggleCam(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void land(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_land(_iceI_begin_land(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_land(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_land(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_land(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::jderobot::Callback_ArDroneExtra_landPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_land(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& context, const ::jderobot::Callback_ArDroneExtra_landPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_land(context, cb, cookie);
    }

    void end_land(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_land(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void takeoff(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_takeoff(_iceI_begin_takeoff(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_takeoff(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_takeoff(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_takeoff(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::jderobot::Callback_ArDroneExtra_takeoffPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_takeoff(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& context, const ::jderobot::Callback_ArDroneExtra_takeoffPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_takeoff(context, cb, cookie);
    }

    void end_takeoff(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_takeoff(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_reset(_iceI_begin_reset(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_reset(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::jderobot::Callback_ArDroneExtra_resetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context, const ::jderobot::Callback_ArDroneExtra_resetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(context, cb, cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_reset(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void recordOnUsb(bool record, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_recordOnUsb(_iceI_begin_recordOnUsb(record, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool record, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_recordOnUsb(record, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool record, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_recordOnUsb(record, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool record, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_recordOnUsb(record, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool record, const ::jderobot::Callback_ArDroneExtra_recordOnUsbPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_recordOnUsb(record, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool record, const ::Ice::Context& context, const ::jderobot::Callback_ArDroneExtra_recordOnUsbPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_recordOnUsb(record, context, cb, cookie);
    }

    void end_recordOnUsb(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_recordOnUsb(bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void ledAnimation(::Ice::Int type, ::Ice::Float duration, ::Ice::Float req, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_ledAnimation(_iceI_begin_ledAnimation(type, duration, req, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int type, ::Ice::Float duration, ::Ice::Float req, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_ledAnimation(type, duration, req, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int type, ::Ice::Float duration, ::Ice::Float req, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ledAnimation(type, duration, req, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int type, ::Ice::Float duration, ::Ice::Float req, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ledAnimation(type, duration, req, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int type, ::Ice::Float duration, ::Ice::Float req, const ::jderobot::Callback_ArDroneExtra_ledAnimationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ledAnimation(type, duration, req, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int type, ::Ice::Float duration, ::Ice::Float req, const ::Ice::Context& context, const ::jderobot::Callback_ArDroneExtra_ledAnimationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ledAnimation(type, duration, req, context, cb, cookie);
    }

    void end_ledAnimation(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_ledAnimation(::Ice::Int, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void flightAnimation(::Ice::Int type, ::Ice::Float duration, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_flightAnimation(_iceI_begin_flightAnimation(type, duration, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int type, ::Ice::Float duration, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_flightAnimation(type, duration, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int type, ::Ice::Float duration, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_flightAnimation(type, duration, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int type, ::Ice::Float duration, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_flightAnimation(type, duration, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int type, ::Ice::Float duration, const ::jderobot::Callback_ArDroneExtra_flightAnimationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_flightAnimation(type, duration, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int type, ::Ice::Float duration, const ::Ice::Context& context, const ::jderobot::Callback_ArDroneExtra_flightAnimationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_flightAnimation(type, duration, context, cb, cookie);
    }

    void end_flightAnimation(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_flightAnimation(::Ice::Int, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void flatTrim(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_flatTrim(_iceI_begin_flatTrim(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_flatTrim(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_flatTrim(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_flatTrim(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::jderobot::Callback_ArDroneExtra_flatTrimPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_flatTrim(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::Context& context, const ::jderobot::Callback_ArDroneExtra_flatTrimPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_flatTrim(context, cb, cookie);
    }

    void end_flatTrim(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_flatTrim(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

class ArDroneExtra : public virtual ::Ice::Object
{
public:

    typedef ArDroneExtraPrx ProxyType;
    typedef ArDroneExtraPtr PointerType;

    virtual ~ArDroneExtra();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void toggleCam(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_toggleCam(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void land(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_land(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void takeoff(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_takeoff(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void reset(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_reset(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void recordOnUsb(bool record, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_recordOnUsb(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void ledAnimation(::Ice::Int type, ::Ice::Float duration, ::Ice::Float req, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_ledAnimation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void flightAnimation(::Ice::Int type, ::Ice::Float duration, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_flightAnimation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void flatTrim(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_flatTrim(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ArDroneExtra& lhs, const ArDroneExtra& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ArDroneExtra& lhs, const ArDroneExtra& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_toggleCam.
 */
template<class T>
class CallbackNC_ArDroneExtra_toggleCam : public Callback_ArDroneExtra_toggleCam_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_toggleCam(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 */
template<class T> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_toggleCam<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 */
template<class T> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_toggleCam<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 */
template<class T> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_toggleCam<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 */
template<class T> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_toggleCam<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_toggleCam.
 */
template<class T, typename CT>
class Callback_ArDroneExtra_toggleCam : public Callback_ArDroneExtra_toggleCam_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_toggleCam(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 */
template<class T, typename CT> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_toggleCam<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 */
template<class T, typename CT> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_toggleCam<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 */
template<class T, typename CT> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_toggleCam<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_toggleCam.
 */
template<class T, typename CT> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_toggleCam<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_land.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_land.
 */
template<class T>
class CallbackNC_ArDroneExtra_land : public Callback_ArDroneExtra_land_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_land(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_land.
 */
template<class T> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_land<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_land.
 */
template<class T> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_land<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_land.
 */
template<class T> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_land<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_land.
 */
template<class T> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_land<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_land.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_land.
 */
template<class T, typename CT>
class Callback_ArDroneExtra_land : public Callback_ArDroneExtra_land_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_land(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_land.
 */
template<class T, typename CT> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_land<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_land.
 */
template<class T, typename CT> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_land<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_land.
 */
template<class T, typename CT> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_land<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_land.
 */
template<class T, typename CT> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_land<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_takeoff.
 */
template<class T>
class CallbackNC_ArDroneExtra_takeoff : public Callback_ArDroneExtra_takeoff_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_takeoff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 */
template<class T> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_takeoff<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 */
template<class T> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_takeoff<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 */
template<class T> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_takeoff<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 */
template<class T> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_takeoff<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_takeoff.
 */
template<class T, typename CT>
class Callback_ArDroneExtra_takeoff : public Callback_ArDroneExtra_takeoff_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_takeoff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 */
template<class T, typename CT> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_takeoff<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 */
template<class T, typename CT> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_takeoff<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 */
template<class T, typename CT> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_takeoff<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_takeoff.
 */
template<class T, typename CT> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_takeoff<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_reset.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_reset.
 */
template<class T>
class CallbackNC_ArDroneExtra_reset : public Callback_ArDroneExtra_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_reset.
 */
template<class T> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_reset<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_reset.
 */
template<class T> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_reset<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_reset.
 */
template<class T> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_reset<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_reset.
 */
template<class T> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_reset<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_reset.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_reset.
 */
template<class T, typename CT>
class Callback_ArDroneExtra_reset : public Callback_ArDroneExtra_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_reset.
 */
template<class T, typename CT> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_reset<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_reset.
 */
template<class T, typename CT> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_reset<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_reset.
 */
template<class T, typename CT> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_reset<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_reset.
 */
template<class T, typename CT> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_reset<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_recordOnUsb.
 */
template<class T>
class CallbackNC_ArDroneExtra_recordOnUsb : public Callback_ArDroneExtra_recordOnUsb_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_recordOnUsb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 */
template<class T> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_recordOnUsb<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 */
template<class T> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_recordOnUsb<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 */
template<class T> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_recordOnUsb<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 */
template<class T> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_recordOnUsb<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_recordOnUsb.
 */
template<class T, typename CT>
class Callback_ArDroneExtra_recordOnUsb : public Callback_ArDroneExtra_recordOnUsb_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_recordOnUsb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 */
template<class T, typename CT> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_recordOnUsb<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 */
template<class T, typename CT> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_recordOnUsb<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 */
template<class T, typename CT> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_recordOnUsb<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb.
 */
template<class T, typename CT> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_recordOnUsb<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_ledAnimation.
 */
template<class T>
class CallbackNC_ArDroneExtra_ledAnimation : public Callback_ArDroneExtra_ledAnimation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_ledAnimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 */
template<class T> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_ledAnimation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 */
template<class T> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_ledAnimation<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 */
template<class T> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_ledAnimation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 */
template<class T> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_ledAnimation<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_ledAnimation.
 */
template<class T, typename CT>
class Callback_ArDroneExtra_ledAnimation : public Callback_ArDroneExtra_ledAnimation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_ledAnimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 */
template<class T, typename CT> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_ledAnimation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 */
template<class T, typename CT> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_ledAnimation<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 */
template<class T, typename CT> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_ledAnimation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_ledAnimation.
 */
template<class T, typename CT> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_ledAnimation<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_flightAnimation.
 */
template<class T>
class CallbackNC_ArDroneExtra_flightAnimation : public Callback_ArDroneExtra_flightAnimation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_flightAnimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 */
template<class T> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flightAnimation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 */
template<class T> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flightAnimation<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 */
template<class T> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flightAnimation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 */
template<class T> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flightAnimation<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_flightAnimation.
 */
template<class T, typename CT>
class Callback_ArDroneExtra_flightAnimation : public Callback_ArDroneExtra_flightAnimation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_flightAnimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 */
template<class T, typename CT> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flightAnimation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 */
template<class T, typename CT> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flightAnimation<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 */
template<class T, typename CT> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flightAnimation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flightAnimation.
 */
template<class T, typename CT> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flightAnimation<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_flatTrim.
 */
template<class T>
class CallbackNC_ArDroneExtra_flatTrim : public Callback_ArDroneExtra_flatTrim_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_flatTrim(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 */
template<class T> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flatTrim<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 */
template<class T> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flatTrim<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 */
template<class T> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flatTrim<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 */
template<class T> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flatTrim<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 * Create a wrapper instance by calling ::jderobot::newCallback_ArDroneExtra_flatTrim.
 */
template<class T, typename CT>
class Callback_ArDroneExtra_flatTrim : public Callback_ArDroneExtra_flatTrim_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_flatTrim(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 */
template<class T, typename CT> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flatTrim<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 */
template<class T, typename CT> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flatTrim<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 */
template<class T, typename CT> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flatTrim<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::ArDroneExtra::begin_flatTrim.
 */
template<class T, typename CT> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flatTrim<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
