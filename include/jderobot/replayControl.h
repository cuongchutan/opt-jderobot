//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `replayControl.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_replayControl_h__
#define __jderobot_replayControl_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class replayControl;
class replayControlPrx;

}

namespace jderobot
{

enum class ReplayerStatus : unsigned char
{
    WAITING,
    PLAYING,
    PAUSED,
    FINISHED
};

}

namespace jderobot
{

class replayControl : public virtual ::Ice::Object
{
public:

    using ProxyType = replayControlPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool pause(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_pause(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool resume(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_resume(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setReplay(bool replay, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setReplay(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool setStep(int step, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setStep(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual long long int getTime(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getTime(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool goTo(long long int seek, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_goTo(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ReplayerStatus getStatus(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getStatus(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

class replayControlPrx : public virtual ::Ice::Proxy<replayControlPrx, ::Ice::ObjectPrx>
{
public:

    bool pause(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &replayControlPrx::_iceI_pause, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto pauseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &replayControlPrx::_iceI_pause, context);
    }

    ::std::function<void()>
    pauseAsync(::std::function<void(bool)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &jderobot::replayControlPrx::_iceI_pause, context);
    }

    /// \cond INTERNAL
    void _iceI_pause(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    bool resume(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &replayControlPrx::_iceI_resume, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resumeAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &replayControlPrx::_iceI_resume, context);
    }

    ::std::function<void()>
    resumeAsync(::std::function<void(bool)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &jderobot::replayControlPrx::_iceI_resume, context);
    }

    /// \cond INTERNAL
    void _iceI_resume(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    void setReplay(bool replay, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &replayControlPrx::_iceI_setReplay, replay, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setReplayAsync(bool replay, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &replayControlPrx::_iceI_setReplay, replay, context);
    }

    ::std::function<void()>
    setReplayAsync(bool replay,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::replayControlPrx::_iceI_setReplay, replay, context);
    }

    /// \cond INTERNAL
    void _iceI_setReplay(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, bool, const ::Ice::Context&);
    /// \endcond

    bool setStep(int step, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &replayControlPrx::_iceI_setStep, step, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setStepAsync(int step, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &replayControlPrx::_iceI_setStep, step, context);
    }

    ::std::function<void()>
    setStepAsync(int step,
                 ::std::function<void(bool)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &jderobot::replayControlPrx::_iceI_setStep, step, context);
    }

    /// \cond INTERNAL
    void _iceI_setStep(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, int, const ::Ice::Context&);
    /// \endcond

    long long int getTime(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<long long int>(true, this, &replayControlPrx::_iceI_getTime, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getTimeAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<long long int>>().get_future())
    {
        return _makePromiseOutgoing<long long int, P>(false, this, &replayControlPrx::_iceI_getTime, context);
    }

    ::std::function<void()>
    getTimeAsync(::std::function<void(long long int)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<long long int>(response, ex, sent, this, &jderobot::replayControlPrx::_iceI_getTime, context);
    }

    /// \cond INTERNAL
    void _iceI_getTime(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<long long int>>&, const ::Ice::Context&);
    /// \endcond

    bool goTo(long long int seek, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &replayControlPrx::_iceI_goTo, seek, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto goToAsync(long long int seek, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &replayControlPrx::_iceI_goTo, seek, context);
    }

    ::std::function<void()>
    goToAsync(long long int seek,
              ::std::function<void(bool)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &jderobot::replayControlPrx::_iceI_goTo, seek, context);
    }

    /// \cond INTERNAL
    void _iceI_goTo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, long long int, const ::Ice::Context&);
    /// \endcond

    ReplayerStatus getStatus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::jderobot::ReplayerStatus>(true, this, &replayControlPrx::_iceI_getStatus, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getStatusAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::jderobot::ReplayerStatus>>().get_future())
    {
        return _makePromiseOutgoing<::jderobot::ReplayerStatus, P>(false, this, &replayControlPrx::_iceI_getStatus, context);
    }

    ::std::function<void()>
    getStatusAsync(::std::function<void(::jderobot::ReplayerStatus)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::jderobot::ReplayerStatus>(response, ex, sent, this, &jderobot::replayControlPrx::_iceI_getStatus, context);
    }

    /// \cond INTERNAL
    void _iceI_getStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::jderobot::ReplayerStatus>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    replayControlPrx() = default;
    friend ::std::shared_ptr<replayControlPrx> IceInternal::createProxy<replayControlPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::jderobot::ReplayerStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using replayControlPtr = ::std::shared_ptr<replayControl>;
using replayControlPrxPtr = ::std::shared_ptr<replayControlPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class replayControl;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< replayControl>&);
::IceProxy::Ice::Object* upCast(replayControl*);
/// \endcond

}

}

namespace jderobot
{

class replayControl;
/// \cond INTERNAL
::Ice::Object* upCast(replayControl*);
/// \endcond
typedef ::IceInternal::Handle< replayControl> replayControlPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::replayControl> replayControlPrx;
typedef replayControlPrx replayControlPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(replayControlPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

enum ReplayerStatus
{
    WAITING,
    PLAYING,
    PAUSED,
    FINISHED
};

}

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::replayControl::begin_pause.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_pause.
 */
class Callback_replayControl_pause_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_pause_Base> Callback_replayControl_pausePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::replayControl::begin_resume.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_resume.
 */
class Callback_replayControl_resume_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_resume_Base> Callback_replayControl_resumePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::replayControl::begin_setReplay.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_setReplay.
 */
class Callback_replayControl_setReplay_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_setReplay_Base> Callback_replayControl_setReplayPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::replayControl::begin_setStep.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_setStep.
 */
class Callback_replayControl_setStep_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_setStep_Base> Callback_replayControl_setStepPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::replayControl::begin_getTime.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_getTime.
 */
class Callback_replayControl_getTime_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_getTime_Base> Callback_replayControl_getTimePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::replayControl::begin_goTo.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_goTo.
 */
class Callback_replayControl_goTo_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_goTo_Base> Callback_replayControl_goToPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::replayControl::begin_getStatus.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_getStatus.
 */
class Callback_replayControl_getStatus_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_getStatus_Base> Callback_replayControl_getStatusPtr;

}

namespace IceProxy
{

namespace jderobot
{

class replayControl : public virtual ::Ice::Proxy<replayControl, ::IceProxy::Ice::Object>
{
public:

    bool pause(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_pause(_iceI_begin_pause(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_pause(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_pause(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_pause(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::jderobot::Callback_replayControl_pausePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_pause(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& context, const ::jderobot::Callback_replayControl_pausePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_pause(context, cb, cookie);
    }

    bool end_pause(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_pause(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool resume(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_resume(_iceI_begin_resume(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_resume(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resume(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resume(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::jderobot::Callback_replayControl_resumePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resume(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& context, const ::jderobot::Callback_replayControl_resumePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resume(context, cb, cookie);
    }

    bool end_resume(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_resume(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setReplay(bool replay, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setReplay(_iceI_begin_setReplay(replay, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool replay, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setReplay(replay, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool replay, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setReplay(replay, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool replay, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setReplay(replay, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool replay, const ::jderobot::Callback_replayControl_setReplayPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setReplay(replay, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool replay, const ::Ice::Context& context, const ::jderobot::Callback_replayControl_setReplayPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setReplay(replay, context, cb, cookie);
    }

    void end_setReplay(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setReplay(bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool setStep(::Ice::Int step, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_setStep(_iceI_begin_setStep(step, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int step, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setStep(step, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int step, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setStep(step, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int step, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setStep(step, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int step, const ::jderobot::Callback_replayControl_setStepPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setStep(step, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int step, const ::Ice::Context& context, const ::jderobot::Callback_replayControl_setStepPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setStep(step, context, cb, cookie);
    }

    bool end_setStep(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setStep(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Long getTime(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getTime(_iceI_begin_getTime(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getTime(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTime(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTime(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::jderobot::Callback_replayControl_getTimePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTime(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& context, const ::jderobot::Callback_replayControl_getTimePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTime(context, cb, cookie);
    }

    ::Ice::Long end_getTime(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getTime(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool goTo(::Ice::Long seek, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_goTo(_iceI_begin_goTo(seek, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long seek, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_goTo(seek, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long seek, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_goTo(seek, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long seek, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_goTo(seek, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long seek, const ::jderobot::Callback_replayControl_goToPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_goTo(seek, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long seek, const ::Ice::Context& context, const ::jderobot::Callback_replayControl_goToPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_goTo(seek, context, cb, cookie);
    }

    bool end_goTo(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_goTo(::Ice::Long, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::jderobot::ReplayerStatus getStatus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getStatus(_iceI_begin_getStatus(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getStatus(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStatus(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStatus(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::jderobot::Callback_replayControl_getStatusPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStatus(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& context, const ::jderobot::Callback_replayControl_getStatusPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStatus(context, cb, cookie);
    }

    ::jderobot::ReplayerStatus end_getStatus(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getStatus(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

class replayControl : public virtual ::Ice::Object
{
public:

    typedef replayControlPrx ProxyType;
    typedef replayControlPtr PointerType;

    virtual ~replayControl();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual bool pause(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_pause(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool resume(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_resume(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setReplay(bool replay, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setReplay(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool setStep(::Ice::Int step, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setStep(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Long getTime(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getTime(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool goTo(::Ice::Long seek, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_goTo(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ReplayerStatus getStatus(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getStatus(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const replayControl& lhs, const replayControl& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const replayControl& lhs, const replayControl& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::jderobot::ReplayerStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::replayControl::begin_pause.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_pause.
 */
template<class T>
class CallbackNC_replayControl_pause : public Callback_replayControl_pause_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_replayControl_pause(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_pause(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_pause.
 */
template<class T> Callback_replayControl_pausePtr
newCallback_replayControl_pause(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_pause<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_pause.
 */
template<class T> Callback_replayControl_pausePtr
newCallback_replayControl_pause(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_pause<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::replayControl::begin_pause.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_pause.
 */
template<class T, typename CT>
class Callback_replayControl_pause : public Callback_replayControl_pause_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_replayControl_pause(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_pause(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_pause.
 */
template<class T, typename CT> Callback_replayControl_pausePtr
newCallback_replayControl_pause(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_pause<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_pause.
 */
template<class T, typename CT> Callback_replayControl_pausePtr
newCallback_replayControl_pause(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_pause<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::replayControl::begin_resume.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_resume.
 */
template<class T>
class CallbackNC_replayControl_resume : public Callback_replayControl_resume_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_replayControl_resume(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_resume(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_resume.
 */
template<class T> Callback_replayControl_resumePtr
newCallback_replayControl_resume(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_resume<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_resume.
 */
template<class T> Callback_replayControl_resumePtr
newCallback_replayControl_resume(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_resume<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::replayControl::begin_resume.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_resume.
 */
template<class T, typename CT>
class Callback_replayControl_resume : public Callback_replayControl_resume_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_replayControl_resume(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_resume(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_resume.
 */
template<class T, typename CT> Callback_replayControl_resumePtr
newCallback_replayControl_resume(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_resume<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_resume.
 */
template<class T, typename CT> Callback_replayControl_resumePtr
newCallback_replayControl_resume(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_resume<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::replayControl::begin_setReplay.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_setReplay.
 */
template<class T>
class CallbackNC_replayControl_setReplay : public Callback_replayControl_setReplay_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_replayControl_setReplay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setReplay.
 */
template<class T> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setReplay<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setReplay.
 */
template<class T> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setReplay<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setReplay.
 */
template<class T> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setReplay<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setReplay.
 */
template<class T> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setReplay<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::replayControl::begin_setReplay.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_setReplay.
 */
template<class T, typename CT>
class Callback_replayControl_setReplay : public Callback_replayControl_setReplay_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_replayControl_setReplay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setReplay.
 */
template<class T, typename CT> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setReplay<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setReplay.
 */
template<class T, typename CT> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setReplay<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setReplay.
 */
template<class T, typename CT> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setReplay<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setReplay.
 */
template<class T, typename CT> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setReplay<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::replayControl::begin_setStep.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_setStep.
 */
template<class T>
class CallbackNC_replayControl_setStep : public Callback_replayControl_setStep_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_replayControl_setStep(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_setStep(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setStep.
 */
template<class T> Callback_replayControl_setStepPtr
newCallback_replayControl_setStep(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setStep<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setStep.
 */
template<class T> Callback_replayControl_setStepPtr
newCallback_replayControl_setStep(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setStep<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::replayControl::begin_setStep.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_setStep.
 */
template<class T, typename CT>
class Callback_replayControl_setStep : public Callback_replayControl_setStep_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_replayControl_setStep(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_setStep(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setStep.
 */
template<class T, typename CT> Callback_replayControl_setStepPtr
newCallback_replayControl_setStep(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setStep<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_setStep.
 */
template<class T, typename CT> Callback_replayControl_setStepPtr
newCallback_replayControl_setStep(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setStep<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::replayControl::begin_getTime.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_getTime.
 */
template<class T>
class CallbackNC_replayControl_getTime : public Callback_replayControl_getTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_replayControl_getTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        ::Ice::Long ret;
        try
        {
            ret = proxy->end_getTime(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_getTime.
 */
template<class T> Callback_replayControl_getTimePtr
newCallback_replayControl_getTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_getTime<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_getTime.
 */
template<class T> Callback_replayControl_getTimePtr
newCallback_replayControl_getTime(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_getTime<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::replayControl::begin_getTime.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_getTime.
 */
template<class T, typename CT>
class Callback_replayControl_getTime : public Callback_replayControl_getTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_replayControl_getTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        ::Ice::Long ret;
        try
        {
            ret = proxy->end_getTime(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_getTime.
 */
template<class T, typename CT> Callback_replayControl_getTimePtr
newCallback_replayControl_getTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_getTime<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_getTime.
 */
template<class T, typename CT> Callback_replayControl_getTimePtr
newCallback_replayControl_getTime(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_getTime<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::replayControl::begin_goTo.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_goTo.
 */
template<class T>
class CallbackNC_replayControl_goTo : public Callback_replayControl_goTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_replayControl_goTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_goTo(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_goTo.
 */
template<class T> Callback_replayControl_goToPtr
newCallback_replayControl_goTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_goTo<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_goTo.
 */
template<class T> Callback_replayControl_goToPtr
newCallback_replayControl_goTo(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_goTo<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::replayControl::begin_goTo.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_goTo.
 */
template<class T, typename CT>
class Callback_replayControl_goTo : public Callback_replayControl_goTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_replayControl_goTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_goTo(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_goTo.
 */
template<class T, typename CT> Callback_replayControl_goToPtr
newCallback_replayControl_goTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_goTo<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_goTo.
 */
template<class T, typename CT> Callback_replayControl_goToPtr
newCallback_replayControl_goTo(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_goTo<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::replayControl::begin_getStatus.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_getStatus.
 */
template<class T>
class CallbackNC_replayControl_getStatus : public Callback_replayControl_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(ReplayerStatus);

    CallbackNC_replayControl_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        ReplayerStatus ret;
        try
        {
            ret = proxy->end_getStatus(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_getStatus.
 */
template<class T> Callback_replayControl_getStatusPtr
newCallback_replayControl_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(ReplayerStatus), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_getStatus<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_getStatus.
 */
template<class T> Callback_replayControl_getStatusPtr
newCallback_replayControl_getStatus(T* instance, void (T::*cb)(ReplayerStatus), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_getStatus<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::replayControl::begin_getStatus.
 * Create a wrapper instance by calling ::jderobot::newCallback_replayControl_getStatus.
 */
template<class T, typename CT>
class Callback_replayControl_getStatus : public Callback_replayControl_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(ReplayerStatus, const CT&);

    Callback_replayControl_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        replayControlPrx proxy = replayControlPrx::uncheckedCast(result->getProxy());
        ReplayerStatus ret;
        try
        {
            ret = proxy->end_getStatus(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_getStatus.
 */
template<class T, typename CT> Callback_replayControl_getStatusPtr
newCallback_replayControl_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(ReplayerStatus, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_getStatus<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::replayControl::begin_getStatus.
 */
template<class T, typename CT> Callback_replayControl_getStatusPtr
newCallback_replayControl_getStatus(T* instance, void (T::*cb)(ReplayerStatus, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_getStatus<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
