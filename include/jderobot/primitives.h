//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `primitives.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_primitives_h__
#define __jderobot_primitives_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

/**
 * PCL
 */
struct RGBPoint
{
    float x;
    float y;
    float z;
    float r;
    float g;
    float b;
    int id;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&, const int&> ice_tuple() const
    {
        return std::tie(x, y, z, r, g, b, id);
    }
};

struct Point
{
    float x;
    float y;
    float z;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z);
    }
};

struct Segment
{
    ::jderobot::Point fromPoint;
    ::jderobot::Point toPoint;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::jderobot::Point&, const ::jderobot::Point&> ice_tuple() const
    {
        return std::tie(fromPoint, toPoint);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::jderobot::RGBPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 28;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::jderobot::RGBPoint, S>
{
    static void read(S* istr, ::jderobot::RGBPoint& v)
    {
        istr->readAll(v.x, v.y, v.z, v.r, v.g, v.b, v.id);
    }
};

template<>
struct StreamableTraits<::jderobot::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::jderobot::Point, S>
{
    static void read(S* istr, ::jderobot::Point& v)
    {
        istr->readAll(v.x, v.y, v.z);
    }
};

template<>
struct StreamableTraits<::jderobot::Segment>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::jderobot::Segment, S>
{
    static void read(S* istr, ::jderobot::Segment& v)
    {
        istr->readAll(v.fromPoint, v.toPoint);
    }
};

}
/// \endcond

#else // C++98 mapping

namespace jderobot
{

/**
 * PCL
 */
struct RGBPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float r;
    ::Ice::Float g;
    ::Ice::Float b;
    ::Ice::Int id;
};

struct Point
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
};

struct Segment
{
    ::jderobot::Point fromPoint;
    ::jderobot::Point toPoint;
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::jderobot::RGBPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 28;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::jderobot::RGBPoint, S>
{
    static void write(S* ostr, const ::jderobot::RGBPoint& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.r);
        ostr->write(v.g);
        ostr->write(v.b);
        ostr->write(v.id);
    }
};

template<typename S>
struct StreamReader< ::jderobot::RGBPoint, S>
{
    static void read(S* istr, ::jderobot::RGBPoint& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.r);
        istr->read(v.g);
        istr->read(v.b);
        istr->read(v.id);
    }
};

template<>
struct StreamableTraits< ::jderobot::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::jderobot::Point, S>
{
    static void write(S* ostr, const ::jderobot::Point& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
    }
};

template<typename S>
struct StreamReader< ::jderobot::Point, S>
{
    static void read(S* istr, ::jderobot::Point& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
    }
};

template<>
struct StreamableTraits< ::jderobot::Segment>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::jderobot::Segment, S>
{
    static void write(S* ostr, const ::jderobot::Segment& v)
    {
        ostr->write(v.fromPoint);
        ostr->write(v.toPoint);
    }
};

template<typename S>
struct StreamReader< ::jderobot::Segment, S>
{
    static void read(S* istr, ::jderobot::Segment& v)
    {
        istr->read(v.fromPoint);
        istr->read(v.toPoint);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
