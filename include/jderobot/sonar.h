//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `sonar.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_sonar_h__
#define __jderobot_sonar_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class SonarData;
class Sonar;
class SonarPrx;

}

namespace jderobot
{

/**
 * Interface to the Gazebo sonar sensor.
 */
class Sonar : public virtual ::Ice::Object
{
public:

    using ProxyType = SonarPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<SonarData> getSonarData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getSonarData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

class SonarData : public ::Ice::ValueHelper<SonarData, ::Ice::Value>
{
public:

    virtual ~SonarData();

    SonarData() = default;

    SonarData(const SonarData&) = default;
    SonarData(SonarData&&) = default;
    SonarData& operator=(const SonarData&) = default;
    SonarData& operator=(SonarData&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    SonarData(float range, float minAngle, float maxAngle, float minRange, float maxRange, const ::jderobot::Time& timeStamp) :
        range(range),
        minAngle(minAngle),
        maxAngle(maxAngle),
        minRange(minRange),
        maxRange(maxRange),
        timeStamp(::std::move(timeStamp))
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const ::jderobot::Time&> ice_tuple() const
    {
        return std::tie(range, minAngle, maxAngle, minRange, maxRange, timeStamp);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    float range;
    float minAngle;
    float maxAngle;
    float minRange;
    float maxRange;
    ::jderobot::Time timeStamp;
};

/// \cond INTERNAL
static SonarData _iceS_SonarData_init;
/// \endcond

}

namespace jderobot
{

/**
 * Interface to the Gazebo sonar sensor.
 */
class SonarPrx : public virtual ::Ice::Proxy<SonarPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<SonarData> getSonarData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::SonarData>>(true, this, &SonarPrx::_iceI_getSonarData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getSonarDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::SonarData>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::SonarData>, P>(false, this, &SonarPrx::_iceI_getSonarData, context);
    }

    ::std::function<void()>
    getSonarDataAsync(::std::function<void(::std::shared_ptr<::jderobot::SonarData>)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::SonarData>>(response, ex, sent, this, &jderobot::SonarPrx::_iceI_getSonarData, context);
    }

    /// \cond INTERNAL
    void _iceI_getSonarData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::SonarData>>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    SonarPrx() = default;
    friend ::std::shared_ptr<SonarPrx> IceInternal::createProxy<SonarPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::jderobot::SonarData, S>
{
    static void read(S* istr, ::jderobot::SonarData& v)
    {
        istr->readAll(v.range, v.minAngle, v.maxAngle, v.minRange, v.maxRange, v.timeStamp);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using SonarDataPtr = ::std::shared_ptr<SonarData>;

using SonarPtr = ::std::shared_ptr<Sonar>;
using SonarPrxPtr = ::std::shared_ptr<SonarPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class SonarData;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< SonarData>&);
::IceProxy::Ice::Object* upCast(SonarData*);
/// \endcond

class Sonar;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Sonar>&);
::IceProxy::Ice::Object* upCast(Sonar*);
/// \endcond

}

}

namespace jderobot
{

class SonarData;
/// \cond INTERNAL
::Ice::Object* upCast(SonarData*);
/// \endcond
typedef ::IceInternal::Handle< SonarData> SonarDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::SonarData> SonarDataPrx;
typedef SonarDataPrx SonarDataPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(SonarDataPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Sonar;
/// \cond INTERNAL
::Ice::Object* upCast(Sonar*);
/// \endcond
typedef ::IceInternal::Handle< Sonar> SonarPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Sonar> SonarPrx;
typedef SonarPrx SonarPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(SonarPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Sonar::begin_getSonarData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Sonar_getSonarData.
 */
class Callback_Sonar_getSonarData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Sonar_getSonarData_Base> Callback_Sonar_getSonarDataPtr;

}

namespace IceProxy
{

namespace jderobot
{

class SonarData : public virtual ::Ice::Proxy<SonarData, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Sonar : public virtual ::Ice::Proxy<Sonar, ::IceProxy::Ice::Object>
{
public:

    ::jderobot::SonarDataPtr getSonarData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getSonarData(_iceI_begin_getSonarData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getSonarData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getSonarData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSonarData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSonarData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSonarData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSonarData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSonarData(const ::jderobot::Callback_Sonar_getSonarDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSonarData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSonarData(const ::Ice::Context& context, const ::jderobot::Callback_Sonar_getSonarDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSonarData(context, cb, cookie);
    }

    ::jderobot::SonarDataPtr end_getSonarData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getSonarData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

class SonarData : public virtual ::Ice::Object
{
public:

    typedef SonarDataPrx ProxyType;
    typedef SonarDataPtr PointerType;

    virtual ~SonarData();

    SonarData()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    SonarData(::Ice::Float range, ::Ice::Float minAngle, ::Ice::Float maxAngle, ::Ice::Float minRange, ::Ice::Float maxRange, const ::jderobot::Time& timeStamp) :
        range(range),
        minAngle(minAngle),
        maxAngle(maxAngle),
        minRange(minRange),
        maxRange(maxRange),
        timeStamp(timeStamp)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Float range;
    ::Ice::Float minAngle;
    ::Ice::Float maxAngle;
    ::Ice::Float minRange;
    ::Ice::Float maxRange;
    ::jderobot::Time timeStamp;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_SonarData_init = ::jderobot::SonarData::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const SonarData& lhs, const SonarData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const SonarData& lhs, const SonarData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

/**
 * Interface to the Gazebo sonar sensor.
 */
class Sonar : public virtual ::Ice::Object
{
public:

    typedef SonarPrx ProxyType;
    typedef SonarPtr PointerType;

    virtual ~Sonar();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual SonarDataPtr getSonarData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getSonarData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Sonar& lhs, const Sonar& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Sonar& lhs, const Sonar& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::jderobot::SonarData, S>
{
    static void write(S* ostr, const ::jderobot::SonarData& v)
    {
        ostr->write(v.range);
        ostr->write(v.minAngle);
        ostr->write(v.maxAngle);
        ostr->write(v.minRange);
        ostr->write(v.maxRange);
        ostr->write(v.timeStamp);
    }
};

template<typename S>
struct StreamReader< ::jderobot::SonarData, S>
{
    static void read(S* istr, ::jderobot::SonarData& v)
    {
        istr->read(v.range);
        istr->read(v.minAngle);
        istr->read(v.maxAngle);
        istr->read(v.minRange);
        istr->read(v.maxRange);
        istr->read(v.timeStamp);
    }
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Sonar::begin_getSonarData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Sonar_getSonarData.
 */
template<class T>
class CallbackNC_Sonar_getSonarData : public Callback_Sonar_getSonarData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SonarDataPtr&);

    CallbackNC_Sonar_getSonarData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SonarPrx proxy = SonarPrx::uncheckedCast(result->getProxy());
        SonarDataPtr ret;
        try
        {
            ret = proxy->end_getSonarData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Sonar::begin_getSonarData.
 */
template<class T> Callback_Sonar_getSonarDataPtr
newCallback_Sonar_getSonarData(const IceUtil::Handle<T>& instance, void (T::*cb)(const SonarDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Sonar_getSonarData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Sonar::begin_getSonarData.
 */
template<class T> Callback_Sonar_getSonarDataPtr
newCallback_Sonar_getSonarData(T* instance, void (T::*cb)(const SonarDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Sonar_getSonarData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Sonar::begin_getSonarData.
 * Create a wrapper instance by calling ::jderobot::newCallback_Sonar_getSonarData.
 */
template<class T, typename CT>
class Callback_Sonar_getSonarData : public Callback_Sonar_getSonarData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SonarDataPtr&, const CT&);

    Callback_Sonar_getSonarData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        SonarPrx proxy = SonarPrx::uncheckedCast(result->getProxy());
        SonarDataPtr ret;
        try
        {
            ret = proxy->end_getSonarData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Sonar::begin_getSonarData.
 */
template<class T, typename CT> Callback_Sonar_getSonarDataPtr
newCallback_Sonar_getSonarData(const IceUtil::Handle<T>& instance, void (T::*cb)(const SonarDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Sonar_getSonarData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Sonar::begin_getSonarData.
 */
template<class T, typename CT> Callback_Sonar_getSonarDataPtr
newCallback_Sonar_getSonarData(T* instance, void (T::*cb)(const SonarDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Sonar_getSonarData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
