//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `pointcloud.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_pointcloud_h__
#define __jderobot_pointcloud_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/primitives.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class pointCloudData;
class pointCloud;
class pointCloudPrx;

}

namespace jderobot
{

using RGBPointsPCL = ::std::vector<RGBPoint>;

}

namespace jderobot
{

class pointCloud : public virtual ::Ice::Object
{
public:

    using ProxyType = pointCloudPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<pointCloudData> getCloudData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getCloudData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

class pointCloudData : public ::Ice::ValueHelper<pointCloudData, ::Ice::Value>
{
public:

    virtual ~pointCloudData();

    pointCloudData() = default;

    pointCloudData(const pointCloudData&) = default;
    pointCloudData(pointCloudData&&) = default;
    pointCloudData& operator=(const pointCloudData&) = default;
    pointCloudData& operator=(pointCloudData&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit pointCloudData(const ::jderobot::RGBPointsPCL& p) :
        p(::std::move(p))
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::jderobot::RGBPointsPCL&> ice_tuple() const
    {
        return std::tie(p);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::jderobot::RGBPointsPCL p;
};

/// \cond INTERNAL
static pointCloudData _iceS_pointCloudData_init;
/// \endcond

}

namespace jderobot
{

class pointCloudPrx : public virtual ::Ice::Proxy<pointCloudPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<pointCloudData> getCloudData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::pointCloudData>>(true, this, &pointCloudPrx::_iceI_getCloudData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getCloudDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::pointCloudData>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::pointCloudData>, P>(false, this, &pointCloudPrx::_iceI_getCloudData, context);
    }

    ::std::function<void()>
    getCloudDataAsync(::std::function<void(::std::shared_ptr<::jderobot::pointCloudData>)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::pointCloudData>>(response, ex, sent, this, &jderobot::pointCloudPrx::_iceI_getCloudData, context);
    }

    /// \cond INTERNAL
    void _iceI_getCloudData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::pointCloudData>>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    pointCloudPrx() = default;
    friend ::std::shared_ptr<pointCloudPrx> IceInternal::createProxy<pointCloudPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::jderobot::pointCloudData, S>
{
    static void read(S* istr, ::jderobot::pointCloudData& v)
    {
        istr->readAll(v.p);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using pointCloudDataPtr = ::std::shared_ptr<pointCloudData>;

using pointCloudPtr = ::std::shared_ptr<pointCloud>;
using pointCloudPrxPtr = ::std::shared_ptr<pointCloudPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class pointCloudData;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< pointCloudData>&);
::IceProxy::Ice::Object* upCast(pointCloudData*);
/// \endcond

class pointCloud;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< pointCloud>&);
::IceProxy::Ice::Object* upCast(pointCloud*);
/// \endcond

}

}

namespace jderobot
{

class pointCloudData;
/// \cond INTERNAL
::Ice::Object* upCast(pointCloudData*);
/// \endcond
typedef ::IceInternal::Handle< pointCloudData> pointCloudDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::pointCloudData> pointCloudDataPrx;
typedef pointCloudDataPrx pointCloudDataPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(pointCloudDataPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class pointCloud;
/// \cond INTERNAL
::Ice::Object* upCast(pointCloud*);
/// \endcond
typedef ::IceInternal::Handle< pointCloud> pointCloudPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::pointCloud> pointCloudPrx;
typedef pointCloudPrx pointCloudPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(pointCloudPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace jderobot
{

typedef ::std::vector<RGBPoint> RGBPointsPCL;

}

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::pointCloud::begin_getCloudData.
 * Create a wrapper instance by calling ::jderobot::newCallback_pointCloud_getCloudData.
 */
class Callback_pointCloud_getCloudData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_pointCloud_getCloudData_Base> Callback_pointCloud_getCloudDataPtr;

}

namespace IceProxy
{

namespace jderobot
{

class pointCloudData : public virtual ::Ice::Proxy<pointCloudData, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class pointCloud : public virtual ::Ice::Proxy<pointCloud, ::IceProxy::Ice::Object>
{
public:

    ::jderobot::pointCloudDataPtr getCloudData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getCloudData(_iceI_begin_getCloudData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getCloudData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getCloudData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCloudData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCloudData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCloudData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCloudData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCloudData(const ::jderobot::Callback_pointCloud_getCloudDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCloudData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCloudData(const ::Ice::Context& context, const ::jderobot::Callback_pointCloud_getCloudDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCloudData(context, cb, cookie);
    }

    ::jderobot::pointCloudDataPtr end_getCloudData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getCloudData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

class pointCloudData : public virtual ::Ice::Object
{
public:

    typedef pointCloudDataPrx ProxyType;
    typedef pointCloudDataPtr PointerType;

    virtual ~pointCloudData();

    pointCloudData()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit pointCloudData(const ::jderobot::RGBPointsPCL& p) :
        p(p)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::jderobot::RGBPointsPCL p;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_pointCloudData_init = ::jderobot::pointCloudData::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const pointCloudData& lhs, const pointCloudData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const pointCloudData& lhs, const pointCloudData& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class pointCloud : public virtual ::Ice::Object
{
public:

    typedef pointCloudPrx ProxyType;
    typedef pointCloudPtr PointerType;

    virtual ~pointCloud();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual pointCloudDataPtr getCloudData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getCloudData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const pointCloud& lhs, const pointCloud& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const pointCloud& lhs, const pointCloud& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::jderobot::pointCloudData, S>
{
    static void write(S* ostr, const ::jderobot::pointCloudData& v)
    {
        ostr->write(v.p);
    }
};

template<typename S>
struct StreamReader< ::jderobot::pointCloudData, S>
{
    static void read(S* istr, ::jderobot::pointCloudData& v)
    {
        istr->read(v.p);
    }
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::pointCloud::begin_getCloudData.
 * Create a wrapper instance by calling ::jderobot::newCallback_pointCloud_getCloudData.
 */
template<class T>
class CallbackNC_pointCloud_getCloudData : public Callback_pointCloud_getCloudData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const pointCloudDataPtr&);

    CallbackNC_pointCloud_getCloudData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        pointCloudPrx proxy = pointCloudPrx::uncheckedCast(result->getProxy());
        pointCloudDataPtr ret;
        try
        {
            ret = proxy->end_getCloudData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::pointCloud::begin_getCloudData.
 */
template<class T> Callback_pointCloud_getCloudDataPtr
newCallback_pointCloud_getCloudData(const IceUtil::Handle<T>& instance, void (T::*cb)(const pointCloudDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_pointCloud_getCloudData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::pointCloud::begin_getCloudData.
 */
template<class T> Callback_pointCloud_getCloudDataPtr
newCallback_pointCloud_getCloudData(T* instance, void (T::*cb)(const pointCloudDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_pointCloud_getCloudData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::pointCloud::begin_getCloudData.
 * Create a wrapper instance by calling ::jderobot::newCallback_pointCloud_getCloudData.
 */
template<class T, typename CT>
class Callback_pointCloud_getCloudData : public Callback_pointCloud_getCloudData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const pointCloudDataPtr&, const CT&);

    Callback_pointCloud_getCloudData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        pointCloudPrx proxy = pointCloudPrx::uncheckedCast(result->getProxy());
        pointCloudDataPtr ret;
        try
        {
            ret = proxy->end_getCloudData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::pointCloud::begin_getCloudData.
 */
template<class T, typename CT> Callback_pointCloud_getCloudDataPtr
newCallback_pointCloud_getCloudData(const IceUtil::Handle<T>& instance, void (T::*cb)(const pointCloudDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_pointCloud_getCloudData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::pointCloud::begin_getCloudData.
 */
template<class T, typename CT> Callback_pointCloud_getCloudDataPtr
newCallback_pointCloud_getCloudData(T* instance, void (T::*cb)(const pointCloudDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_pointCloud_getCloudData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
