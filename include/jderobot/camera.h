//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `camera.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot_camera_h__
#define __jderobot_camera_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <jderobot/image.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace jderobot
{

class CameraDescription;
class Camera;
class CameraPrx;

}

namespace jderobot
{

/**
 * Camera interface
 */
class Camera : public virtual ImageProvider
{
public:

    using ProxyType = CameraPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<CameraDescription> getCameraDescription(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getCameraDescription(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int setCameraDescription(::std::shared_ptr<CameraDescription> description, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setCameraDescription(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string startCameraStreaming(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startCameraStreaming(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void stopCameraStreaming(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stopCameraStreaming(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void reset(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_reset(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace jderobot
{

/**
 * Static description of a camera
 */
class CameraDescription : public ::Ice::ValueHelper<CameraDescription, ::Ice::Value>
{
public:

    virtual ~CameraDescription();

    CameraDescription() = default;

    CameraDescription(const CameraDescription&) = default;
    CameraDescription(CameraDescription&&) = default;
    CameraDescription& operator=(const CameraDescription&) = default;
    CameraDescription& operator=(CameraDescription&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    CameraDescription(const ::std::string& name, const ::std::string& shortDescription, const ::std::string& streamingUri, float fdistx, float fdisty, float u0, float v0, float skew, float posx, float posy, float posz, float foax, float foay, float foaz, float roll) :
        name(::std::move(name)),
        shortDescription(::std::move(shortDescription)),
        streamingUri(::std::move(streamingUri)),
        fdistx(fdistx),
        fdisty(fdisty),
        u0(u0),
        v0(v0),
        skew(skew),
        posx(posx),
        posy(posy),
        posz(posz),
        foax(foax),
        foay(foay),
        foaz(foaz),
        roll(roll)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(name, shortDescription, streamingUri, fdistx, fdisty, u0, v0, skew, posx, posy, posz, foax, foay, foaz, roll);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string name;
    ::std::string shortDescription;
    ::std::string streamingUri;
    float fdistx;
    float fdisty;
    float u0;
    float v0;
    float skew;
    float posx;
    float posy;
    float posz;
    float foax;
    float foay;
    float foaz;
    float roll;
};

/// \cond INTERNAL
static CameraDescription _iceS_CameraDescription_init;
/// \endcond

}

namespace jderobot
{

/**
 * Camera interface
 */
class CameraPrx : public virtual ::Ice::Proxy<CameraPrx, ImageProviderPrx>
{
public:

    ::std::shared_ptr<CameraDescription> getCameraDescription(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::CameraDescription>>(true, this, &CameraPrx::_iceI_getCameraDescription, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getCameraDescriptionAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::jderobot::CameraDescription>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::jderobot::CameraDescription>, P>(false, this, &CameraPrx::_iceI_getCameraDescription, context);
    }

    ::std::function<void()>
    getCameraDescriptionAsync(::std::function<void(::std::shared_ptr<::jderobot::CameraDescription>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<::jderobot::CameraDescription>>(response, ex, sent, this, &jderobot::CameraPrx::_iceI_getCameraDescription, context);
    }

    /// \cond INTERNAL
    void _iceI_getCameraDescription(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::jderobot::CameraDescription>>>&, const ::Ice::Context&);
    /// \endcond

    int setCameraDescription(const ::std::shared_ptr<CameraDescription>& description, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &CameraPrx::_iceI_setCameraDescription, description, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setCameraDescriptionAsync(const ::std::shared_ptr<CameraDescription>& description, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &CameraPrx::_iceI_setCameraDescription, description, context);
    }

    ::std::function<void()>
    setCameraDescriptionAsync(const ::std::shared_ptr<CameraDescription>& description,
                              ::std::function<void(int)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &jderobot::CameraPrx::_iceI_setCameraDescription, description, context);
    }

    /// \cond INTERNAL
    void _iceI_setCameraDescription(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::std::shared_ptr<CameraDescription>&, const ::Ice::Context&);
    /// \endcond

    ::std::string startCameraStreaming(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &CameraPrx::_iceI_startCameraStreaming, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto startCameraStreamingAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &CameraPrx::_iceI_startCameraStreaming, context);
    }

    ::std::function<void()>
    startCameraStreamingAsync(::std::function<void(::std::string)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &jderobot::CameraPrx::_iceI_startCameraStreaming, context);
    }

    /// \cond INTERNAL
    void _iceI_startCameraStreaming(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    void stopCameraStreaming(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CameraPrx::_iceI_stopCameraStreaming, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopCameraStreamingAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CameraPrx::_iceI_stopCameraStreaming, context);
    }

    ::std::function<void()>
    stopCameraStreamingAsync(::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::CameraPrx::_iceI_stopCameraStreaming, context);
    }

    /// \cond INTERNAL
    void _iceI_stopCameraStreaming(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CameraPrx::_iceI_reset, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resetAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CameraPrx::_iceI_reset, context);
    }

    ::std::function<void()>
    resetAsync(::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &jderobot::CameraPrx::_iceI_reset, context);
    }

    /// \cond INTERNAL
    void _iceI_reset(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CameraPrx() = default;
    friend ::std::shared_ptr<CameraPrx> IceInternal::createProxy<CameraPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::jderobot::CameraDescription, S>
{
    static void read(S* istr, ::jderobot::CameraDescription& v)
    {
        istr->readAll(v.name, v.shortDescription, v.streamingUri, v.fdistx, v.fdisty, v.u0, v.v0, v.skew, v.posx, v.posy, v.posz, v.foax, v.foay, v.foaz, v.roll);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace jderobot
{

using CameraDescriptionPtr = ::std::shared_ptr<CameraDescription>;

using CameraPtr = ::std::shared_ptr<Camera>;
using CameraPrxPtr = ::std::shared_ptr<CameraPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace jderobot
{

class CameraDescription;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< CameraDescription>&);
::IceProxy::Ice::Object* upCast(CameraDescription*);
/// \endcond

class Camera;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Camera>&);
::IceProxy::Ice::Object* upCast(Camera*);
/// \endcond

}

}

namespace jderobot
{

class CameraDescription;
/// \cond INTERNAL
::Ice::Object* upCast(CameraDescription*);
/// \endcond
typedef ::IceInternal::Handle< CameraDescription> CameraDescriptionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::CameraDescription> CameraDescriptionPrx;
typedef CameraDescriptionPrx CameraDescriptionPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(CameraDescriptionPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Camera;
/// \cond INTERNAL
::Ice::Object* upCast(Camera*);
/// \endcond
typedef ::IceInternal::Handle< Camera> CameraPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Camera> CameraPrx;
typedef CameraPrx CameraPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(CameraPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

/// \cond INTERNAL
namespace IceAsync
{

}
/// \endcond

namespace jderobot
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Camera::begin_getCameraDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_getCameraDescription.
 */
class Callback_Camera_getCameraDescription_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getCameraDescription_Base> Callback_Camera_getCameraDescriptionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Camera::begin_setCameraDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_setCameraDescription.
 */
class Callback_Camera_setCameraDescription_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_setCameraDescription_Base> Callback_Camera_setCameraDescriptionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Camera::begin_startCameraStreaming.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_startCameraStreaming.
 */
class Callback_Camera_startCameraStreaming_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_startCameraStreaming_Base> Callback_Camera_startCameraStreamingPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_stopCameraStreaming.
 */
class Callback_Camera_stopCameraStreaming_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_stopCameraStreaming_Base> Callback_Camera_stopCameraStreamingPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::jderobot::Camera::begin_reset.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_reset.
 */
class Callback_Camera_reset_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_reset_Base> Callback_Camera_resetPtr;

}

namespace IceProxy
{

namespace jderobot
{

class CameraDescription : public virtual ::Ice::Proxy<CameraDescription, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Camera : public virtual ::Ice::Proxy<Camera, ::IceProxy::jderobot::ImageProvider>
{
public:

    ::jderobot::CameraDescriptionPtr getCameraDescription(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getCameraDescription(_iceI_begin_getCameraDescription(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getCameraDescription(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCameraDescription(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCameraDescription(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::jderobot::Callback_Camera_getCameraDescriptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCameraDescription(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::Context& context, const ::jderobot::Callback_Camera_getCameraDescriptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCameraDescription(context, cb, cookie);
    }

    ::jderobot::CameraDescriptionPtr end_getCameraDescription(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getCameraDescription(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int setCameraDescription(const ::jderobot::CameraDescriptionPtr& description, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_setCameraDescription(_iceI_begin_setCameraDescription(description, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& description, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setCameraDescription(description, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& description, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setCameraDescription(description, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& description, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setCameraDescription(description, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& description, const ::jderobot::Callback_Camera_setCameraDescriptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setCameraDescription(description, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& description, const ::Ice::Context& context, const ::jderobot::Callback_Camera_setCameraDescriptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setCameraDescription(description, context, cb, cookie);
    }

    ::Ice::Int end_setCameraDescription(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string startCameraStreaming(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_startCameraStreaming(_iceI_begin_startCameraStreaming(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_startCameraStreaming(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startCameraStreaming(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startCameraStreaming(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::jderobot::Callback_Camera_startCameraStreamingPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startCameraStreaming(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::Context& context, const ::jderobot::Callback_Camera_startCameraStreamingPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startCameraStreaming(context, cb, cookie);
    }

    ::std::string end_startCameraStreaming(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_startCameraStreaming(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void stopCameraStreaming(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stopCameraStreaming(_iceI_begin_stopCameraStreaming(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stopCameraStreaming(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopCameraStreaming(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopCameraStreaming(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::jderobot::Callback_Camera_stopCameraStreamingPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopCameraStreaming(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::Context& context, const ::jderobot::Callback_Camera_stopCameraStreamingPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopCameraStreaming(context, cb, cookie);
    }

    void end_stopCameraStreaming(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stopCameraStreaming(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_reset(_iceI_begin_reset(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_reset(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::jderobot::Callback_Camera_resetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& context, const ::jderobot::Callback_Camera_resetPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reset(context, cb, cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_reset(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace jderobot
{

/**
 * Static description of a camera
 */
class CameraDescription : public virtual ::Ice::Object
{
public:

    typedef CameraDescriptionPrx ProxyType;
    typedef CameraDescriptionPtr PointerType;

    virtual ~CameraDescription();

    CameraDescription()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    CameraDescription(const ::std::string& name, const ::std::string& shortDescription, const ::std::string& streamingUri, ::Ice::Float fdistx, ::Ice::Float fdisty, ::Ice::Float u0, ::Ice::Float v0, ::Ice::Float skew, ::Ice::Float posx, ::Ice::Float posy, ::Ice::Float posz, ::Ice::Float foax, ::Ice::Float foay, ::Ice::Float foaz, ::Ice::Float roll) :
        name(name),
        shortDescription(shortDescription),
        streamingUri(streamingUri),
        fdistx(fdistx),
        fdisty(fdisty),
        u0(u0),
        v0(v0),
        skew(skew),
        posx(posx),
        posy(posy),
        posz(posz),
        foax(foax),
        foay(foay),
        foaz(foaz),
        roll(roll)
    {
    }

    /**
     * Polymporphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::std::string name;
    ::std::string shortDescription;
    ::std::string streamingUri;
    ::Ice::Float fdistx;
    ::Ice::Float fdisty;
    ::Ice::Float u0;
    ::Ice::Float v0;
    ::Ice::Float skew;
    ::Ice::Float posx;
    ::Ice::Float posy;
    ::Ice::Float posz;
    ::Ice::Float foax;
    ::Ice::Float foay;
    ::Ice::Float foaz;
    ::Ice::Float roll;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_CameraDescription_init = ::jderobot::CameraDescription::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const CameraDescription& lhs, const CameraDescription& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const CameraDescription& lhs, const CameraDescription& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

/**
 * Camera interface
 */
class Camera : virtual public ImageProvider
{
public:

    typedef CameraPrx ProxyType;
    typedef CameraPtr PointerType;

    virtual ~Camera();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual CameraDescriptionPtr getCameraDescription(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getCameraDescription(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int setCameraDescription(const CameraDescriptionPtr& description, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setCameraDescription(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string startCameraStreaming(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_startCameraStreaming(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void stopCameraStreaming(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_stopCameraStreaming(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void reset(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_reset(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Camera& lhs, const Camera& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Camera& lhs, const Camera& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::jderobot::CameraDescription, S>
{
    static void write(S* ostr, const ::jderobot::CameraDescription& v)
    {
        ostr->write(v.name);
        ostr->write(v.shortDescription);
        ostr->write(v.streamingUri);
        ostr->write(v.fdistx);
        ostr->write(v.fdisty);
        ostr->write(v.u0);
        ostr->write(v.v0);
        ostr->write(v.skew);
        ostr->write(v.posx);
        ostr->write(v.posy);
        ostr->write(v.posz);
        ostr->write(v.foax);
        ostr->write(v.foay);
        ostr->write(v.foaz);
        ostr->write(v.roll);
    }
};

template<typename S>
struct StreamReader< ::jderobot::CameraDescription, S>
{
    static void read(S* istr, ::jderobot::CameraDescription& v)
    {
        istr->read(v.name);
        istr->read(v.shortDescription);
        istr->read(v.streamingUri);
        istr->read(v.fdistx);
        istr->read(v.fdisty);
        istr->read(v.u0);
        istr->read(v.v0);
        istr->read(v.skew);
        istr->read(v.posx);
        istr->read(v.posy);
        istr->read(v.posz);
        istr->read(v.foax);
        istr->read(v.foay);
        istr->read(v.foaz);
        istr->read(v.roll);
    }
};

}
/// \endcond

namespace jderobot
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Camera::begin_getCameraDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_getCameraDescription.
 */
template<class T>
class CallbackNC_Camera_getCameraDescription : public Callback_Camera_getCameraDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const CameraDescriptionPtr&);

    CallbackNC_Camera_getCameraDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraPrx proxy = CameraPrx::uncheckedCast(result->getProxy());
        CameraDescriptionPtr ret;
        try
        {
            ret = proxy->end_getCameraDescription(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_getCameraDescription.
 */
template<class T> Callback_Camera_getCameraDescriptionPtr
newCallback_Camera_getCameraDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CameraDescriptionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getCameraDescription<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_getCameraDescription.
 */
template<class T> Callback_Camera_getCameraDescriptionPtr
newCallback_Camera_getCameraDescription(T* instance, void (T::*cb)(const CameraDescriptionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getCameraDescription<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Camera::begin_getCameraDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_getCameraDescription.
 */
template<class T, typename CT>
class Callback_Camera_getCameraDescription : public Callback_Camera_getCameraDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CameraDescriptionPtr&, const CT&);

    Callback_Camera_getCameraDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraPrx proxy = CameraPrx::uncheckedCast(result->getProxy());
        CameraDescriptionPtr ret;
        try
        {
            ret = proxy->end_getCameraDescription(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_getCameraDescription.
 */
template<class T, typename CT> Callback_Camera_getCameraDescriptionPtr
newCallback_Camera_getCameraDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const CameraDescriptionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getCameraDescription<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_getCameraDescription.
 */
template<class T, typename CT> Callback_Camera_getCameraDescriptionPtr
newCallback_Camera_getCameraDescription(T* instance, void (T::*cb)(const CameraDescriptionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getCameraDescription<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Camera::begin_setCameraDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_setCameraDescription.
 */
template<class T>
class CallbackNC_Camera_setCameraDescription : public Callback_Camera_setCameraDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Camera_setCameraDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraPrx proxy = CameraPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_setCameraDescription(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_setCameraDescription.
 */
template<class T> Callback_Camera_setCameraDescriptionPtr
newCallback_Camera_setCameraDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setCameraDescription<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_setCameraDescription.
 */
template<class T> Callback_Camera_setCameraDescriptionPtr
newCallback_Camera_setCameraDescription(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setCameraDescription<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Camera::begin_setCameraDescription.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_setCameraDescription.
 */
template<class T, typename CT>
class Callback_Camera_setCameraDescription : public Callback_Camera_setCameraDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Camera_setCameraDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraPrx proxy = CameraPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_setCameraDescription(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_setCameraDescription.
 */
template<class T, typename CT> Callback_Camera_setCameraDescriptionPtr
newCallback_Camera_setCameraDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setCameraDescription<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_setCameraDescription.
 */
template<class T, typename CT> Callback_Camera_setCameraDescriptionPtr
newCallback_Camera_setCameraDescription(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setCameraDescription<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Camera::begin_startCameraStreaming.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_startCameraStreaming.
 */
template<class T>
class CallbackNC_Camera_startCameraStreaming : public Callback_Camera_startCameraStreaming_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Camera_startCameraStreaming(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraPrx proxy = CameraPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_startCameraStreaming(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_startCameraStreaming.
 */
template<class T> Callback_Camera_startCameraStreamingPtr
newCallback_Camera_startCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_startCameraStreaming<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_startCameraStreaming.
 */
template<class T> Callback_Camera_startCameraStreamingPtr
newCallback_Camera_startCameraStreaming(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_startCameraStreaming<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Camera::begin_startCameraStreaming.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_startCameraStreaming.
 */
template<class T, typename CT>
class Callback_Camera_startCameraStreaming : public Callback_Camera_startCameraStreaming_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Camera_startCameraStreaming(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CameraPrx proxy = CameraPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_startCameraStreaming(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_startCameraStreaming.
 */
template<class T, typename CT> Callback_Camera_startCameraStreamingPtr
newCallback_Camera_startCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_startCameraStreaming<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_startCameraStreaming.
 */
template<class T, typename CT> Callback_Camera_startCameraStreamingPtr
newCallback_Camera_startCameraStreaming(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_startCameraStreaming<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_stopCameraStreaming.
 */
template<class T>
class CallbackNC_Camera_stopCameraStreaming : public Callback_Camera_stopCameraStreaming_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Camera_stopCameraStreaming(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 */
template<class T> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_stopCameraStreaming<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 */
template<class T> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_stopCameraStreaming<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 */
template<class T> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_stopCameraStreaming<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 */
template<class T> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_stopCameraStreaming<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_stopCameraStreaming.
 */
template<class T, typename CT>
class Callback_Camera_stopCameraStreaming : public Callback_Camera_stopCameraStreaming_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Camera_stopCameraStreaming(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 */
template<class T, typename CT> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_stopCameraStreaming<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 */
template<class T, typename CT> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_stopCameraStreaming<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 */
template<class T, typename CT> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_stopCameraStreaming<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_stopCameraStreaming.
 */
template<class T, typename CT> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_stopCameraStreaming<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::jderobot::Camera::begin_reset.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_reset.
 */
template<class T>
class CallbackNC_Camera_reset : public Callback_Camera_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Camera_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_reset.
 */
template<class T> Callback_Camera_resetPtr
newCallback_Camera_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_reset<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_reset.
 */
template<class T> Callback_Camera_resetPtr
newCallback_Camera_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_reset<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_reset.
 */
template<class T> Callback_Camera_resetPtr
newCallback_Camera_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_reset<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_reset.
 */
template<class T> Callback_Camera_resetPtr
newCallback_Camera_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_reset<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::jderobot::Camera::begin_reset.
 * Create a wrapper instance by calling ::jderobot::newCallback_Camera_reset.
 */
template<class T, typename CT>
class Callback_Camera_reset : public Callback_Camera_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Camera_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_reset.
 */
template<class T, typename CT> Callback_Camera_resetPtr
newCallback_Camera_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_reset<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_reset.
 */
template<class T, typename CT> Callback_Camera_resetPtr
newCallback_Camera_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_reset<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_reset.
 */
template<class T, typename CT> Callback_Camera_resetPtr
newCallback_Camera_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_reset<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::jderobot::Camera::begin_reset.
 */
template<class T, typename CT> Callback_Camera_resetPtr
newCallback_Camera_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_reset<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
